
Proyecto_asm_ejercicio_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b4  080043b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043bc  080043bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000070  08004434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004434  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f70  00000000  00000000  0002d36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021970  00000000  00000000  00030768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d071  00000000  00000000  000520d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c91ac  00000000  00000000  0005f149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001282f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  00128348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800423c 	.word	0x0800423c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800423c 	.word	0x0800423c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fc5c 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f868 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f92c 	bl	8000830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 f8d0 	bl	800077c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005dc:	f000 f8f8 	bl	80007d0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint32_t longitud = 4096;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  uint32_t posicion = 882;
 80005e6:	f240 3372 	movw	r3, #882	; 0x372
 80005ea:	61fb      	str	r3, [r7, #28]
  int16_t vectorIn[longitud];
 80005ec:	69b9      	ldr	r1, [r7, #24]
 80005ee:	460b      	mov	r3, r1
 80005f0:	3b01      	subs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	2300      	movs	r3, #0
 80005f6:	6039      	str	r1, [r7, #0]
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	0103      	lsls	r3, r0, #4
 8000606:	6838      	ldr	r0, [r7, #0]
 8000608:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800060c:	6838      	ldr	r0, [r7, #0]
 800060e:	0102      	lsls	r2, r0, #4
 8000610:	2300      	movs	r3, #0
 8000612:	468a      	mov	sl, r1
 8000614:	469b      	mov	fp, r3
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	f04f 0300 	mov.w	r3, #0
 800061e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000622:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000626:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800062a:	004b      	lsls	r3, r1, #1
 800062c:	3307      	adds	r3, #7
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	ebad 0d03 	sub.w	sp, sp, r3
 8000636:	466b      	mov	r3, sp
 8000638:	3301      	adds	r3, #1
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  //uint32_t longitud = ;
  int16_t vectorOut[longitud];
 8000640:	69b9      	ldr	r1, [r7, #24]
 8000642:	460b      	mov	r3, r1
 8000644:	3b01      	subs	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	2300      	movs	r3, #0
 800064a:	4688      	mov	r8, r1
 800064c:	4699      	mov	r9, r3
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800065a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800065e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000662:	2300      	movs	r3, #0
 8000664:	460c      	mov	r4, r1
 8000666:	461d      	mov	r5, r3
 8000668:	f04f 0200 	mov.w	r2, #0
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	012b      	lsls	r3, r5, #4
 8000672:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000676:	0122      	lsls	r2, r4, #4
 8000678:	004b      	lsls	r3, r1, #1
 800067a:	3307      	adds	r3, #7
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	ebad 0d03 	sub.w	sp, sp, r3
 8000684:	466b      	mov	r3, sp
 8000686:	3301      	adds	r3, #1
 8000688:	085b      	lsrs	r3, r3, #1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	60bb      	str	r3, [r7, #8]

  generaVector(vectorIn, longitud);
 800068e:	69b9      	ldr	r1, [r7, #24]
 8000690:	6938      	ldr	r0, [r7, #16]
 8000692:	f000 f9c2 	bl	8000a1a <generaVector>

  ecovector(vectorIn, vectorOut, posicion, longitud);
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	69fa      	ldr	r2, [r7, #28]
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	6938      	ldr	r0, [r7, #16]
 800069e:	f000 f975 	bl	800098c <ecovector>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0xde>

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2234      	movs	r2, #52	; 0x34
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd82 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <SystemClock_Config+0xd4>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000718:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000722:	2308      	movs	r3, #8
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fcc8 	bl	80020c4 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 f98d 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2103      	movs	r1, #3
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f806 	bl	800176c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000766:	f000 f977 	bl	8000a58 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART3_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f001 ff0a 	bl	80025cc <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f94b 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	40004800 	.word	0x40004800

080007d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007de:	2206      	movs	r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007f0:	2202      	movs	r2, #2
 80007f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000808:	2201      	movs	r2, #1
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800080e:	2201      	movs	r2, #1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081a:	f000 fe5e 	bl	80014da <HAL_PCD_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f918 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000d0 	.word	0x200000d0

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a4b      	ldr	r2, [pc, #300]	; (800097c <MX_GPIO_Init+0x14c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <MX_GPIO_Init+0x14c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3d      	ldr	r2, [pc, #244]	; (800097c <MX_GPIO_Init+0x14c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a36      	ldr	r2, [pc, #216]	; (800097c <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_GPIO_Init+0x150>)
 80008f6:	f000 fdd7 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_GPIO_Init+0x154>)
 8000900:	f000 fdd2 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	; (8000988 <MX_GPIO_Init+0x158>)
 800091c:	f000 fc30 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000920:	f244 0381 	movw	r3, #16513	; 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_GPIO_Init+0x150>)
 800093a:	f000 fc21 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0x154>)
 8000956:	f000 fc13 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x154>)
 800096e:	f000 fc07 	bl	8001180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800

0800098c <ecovector>:

/* USER CODE BEGIN 4 */
void ecovector(int16_t *vectorIn, int16_t *vectorOut, uint32_t posicion, uint32_t longitud)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
	for(uint32_t i = 0; i < posicion; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e00d      	b.n	80009bc <ecovector+0x30>
	{
		vectorOut[i] = vectorIn[i];
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	441a      	add	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	440b      	add	r3, r1
 80009b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009b4:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < posicion; i++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3ed      	bcc.n	80009a0 <ecovector+0x14>
	}
	for(uint32_t i = posicion; i < longitud; i++)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	e01c      	b.n	8000a04 <ecovector+0x78>
	{
		vectorOut[i] = vectorIn[i] + vectorIn[i]/2;
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	68f9      	ldr	r1, [r7, #12]
 80009de:	440b      	add	r3, r1
 80009e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e4:	0fd9      	lsrs	r1, r3, #31
 80009e6:	440b      	add	r3, r1
 80009e8:	105b      	asrs	r3, r3, #1
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	b299      	uxth	r1, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	4413      	add	r3, r2
 80009fa:	b20a      	sxth	r2, r1
 80009fc:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = posicion; i < longitud; i++)
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	3301      	adds	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3de      	bcc.n	80009ca <ecovector+0x3e>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <generaVector>:

void generaVector(int16_t *vectorIn, uint32_t longitud)
  {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
	 for(uint32_t i = longitud; i > 0; i --)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e00e      	b.n	8000a48 <generaVector+0x2e>
	 {
		 vectorIn[i-1] = rand();
 8000a2a:	f002 fbcf 	bl	80031cc <rand>
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a36:	3b01      	subs	r3, #1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b20a      	sxth	r2, r1
 8000a40:	801a      	strh	r2, [r3, #0]
	 for(uint32_t i = longitud; i > 0; i --)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1ed      	bne.n	8000a2a <generaVector+0x10>
	 }
   }
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12c      	bne.n	8000b30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b20:	2307      	movs	r3, #7
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x8c>)
 8000b2c:	f000 fb28 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0a0      	sub	sp, #128	; 0x80
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2258      	movs	r2, #88	; 0x58
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 fb29 	bl	80031bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b72:	d14d      	bne.n	8000c10 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b74:	2320      	movs	r3, #32
 8000b76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f813 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000b8c:	f7ff ff64 	bl	8000a58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4814      	ldr	r0, [pc, #80]	; (8000c1c <HAL_PCD_MspInit+0xd8>)
 8000bca:	f000 fad9 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000be0:	4619      	mov	r1, r3
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <HAL_PCD_MspInit+0xd8>)
 8000be4:	f000 facc 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf2:	6353      	str	r3, [r2, #52]	; 0x34
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6453      	str	r3, [r2, #68]	; 0x44
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_PCD_MspInit+0xd4>)
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3780      	adds	r7, #128	; 0x80
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f383 8814 	msr	CONTROL, r3
}
 8000c4e:	bf00      	nop
	__set_CONTROL(0b00);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f956 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_kill>:

int _kill(int pid, int sig)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c9e:	f002 fa63 	bl	8003168 <__errno>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2216      	movs	r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_exit>:

void _exit (int status)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe7 	bl	8000c94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cc6:	e7fe      	b.n	8000cc6 <_exit+0x12>

08000cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
  }

  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
  }
  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
  return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f002 f9c8 	bl	8003168 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20050000 	.word	0x20050000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	200005dc 	.word	0x200005dc
 8000e0c:	200005f8 	.word	0x200005f8

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f002 f987 	bl	8003174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fbad 	bl	80005c4 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e78:	080043c4 	.word	0x080043c4
  ldr r2, =_sbss
 8000e7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e80:	200005f4 	.word	0x200005f4

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f931 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fdd2 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f93b 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f911 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	200005e0 	.word	0x200005e0

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200005e0 	.word	0x200005e0

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e165      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8154 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80ae 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_GPIO_Init+0x300>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_GPIO_Init+0x300>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x308>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x310>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_GPIO_Init+0x314>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x20e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_GPIO_Init+0x318>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x20a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x31c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x206>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x320>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x202>
 800137e:	2306      	movs	r3, #6
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001382:	2307      	movs	r3, #7
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x21c>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x21c>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013de:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_GPIO_Init+0x324>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f ae96 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014dc:	b08f      	sub	sp, #60	; 0x3c
 80014de:	af0a      	add	r7, sp, #40	; 0x28
 80014e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e116      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fb1c 	bl	8000b44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fb81 	bl	8002c32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	687e      	ldr	r6, [r7, #4]
 8001538:	466d      	mov	r5, sp
 800153a:	f106 0410 	add.w	r4, r6, #16
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800154a:	e885 0003 	stmia.w	r5, {r0, r1}
 800154e:	1d33      	adds	r3, r6, #4
 8001550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f001 fb0c 	bl	8002b70 <USB_CoreInit>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0d7      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f001 fb6f 	bl	8002c54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e04a      	b.n	8001612 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	333d      	adds	r3, #61	; 0x3d
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	333c      	adds	r3, #60	; 0x3c
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	b298      	uxth	r0, r3
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3344      	adds	r3, #68	; 0x44
 80015b8:	4602      	mov	r2, r0
 80015ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3340      	adds	r3, #64	; 0x40
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3348      	adds	r3, #72	; 0x48
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	334c      	adds	r3, #76	; 0x4c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3354      	adds	r3, #84	; 0x54
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3af      	bcc.n	800157c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e044      	b.n	80016ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3b5      	bcc.n	8001622 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	687e      	ldr	r6, [r7, #4]
 80016be:	466d      	mov	r5, sp
 80016c0:	f106 0410 	add.w	r4, r6, #16
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d4:	1d33      	adds	r3, r6, #4
 80016d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f001 fb07 	bl	8002cec <USB_DevInit>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e014      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b01      	cmp	r3, #1
 8001706:	d102      	bne.n	800170e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f80a 	bl	8001722 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fcc5 	bl	80030a2 <USB_DevDisconnect>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001722 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	f043 0303 	orr.w	r3, r3, #3
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0cc      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d90c      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d044      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e067      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff fb7a 	bl	8000f54 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fb76 	bl	8000f54 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e04f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d20c      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fada 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	08004254 	.word	0x08004254
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800193c:	b094      	sub	sp, #80	; 0x50
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
 8001944:	2300      	movs	r3, #0
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80e1 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e0db      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001970:	e0db      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001976:	e0d8      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d063      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	2200      	movs	r2, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
 8001998:	63fa      	str	r2, [r7, #60]	; 0x3c
 800199a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
 80019a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019aa:	4622      	mov	r2, r4
 80019ac:	462b      	mov	r3, r5
 80019ae:	f04f 0000 	mov.w	r0, #0
 80019b2:	f04f 0100 	mov.w	r1, #0
 80019b6:	0159      	lsls	r1, r3, #5
 80019b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019bc:	0150      	lsls	r0, r2, #5
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4621      	mov	r1, r4
 80019c4:	1a51      	subs	r1, r2, r1
 80019c6:	6139      	str	r1, [r7, #16]
 80019c8:	4629      	mov	r1, r5
 80019ca:	eb63 0301 	sbc.w	r3, r3, r1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019dc:	4659      	mov	r1, fp
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	4651      	mov	r1, sl
 80019e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e6:	4651      	mov	r1, sl
 80019e8:	018a      	lsls	r2, r1, #6
 80019ea:	4651      	mov	r1, sl
 80019ec:	ebb2 0801 	subs.w	r8, r2, r1
 80019f0:	4659      	mov	r1, fp
 80019f2:	eb63 0901 	sbc.w	r9, r3, r1
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a0a:	4690      	mov	r8, r2
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4623      	mov	r3, r4
 8001a10:	eb18 0303 	adds.w	r3, r8, r3
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	462b      	mov	r3, r5
 8001a18:	eb49 0303 	adc.w	r3, r9, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	024b      	lsls	r3, r1, #9
 8001a2e:	4621      	mov	r1, r4
 8001a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a34:	4621      	mov	r1, r4
 8001a36:	024a      	lsls	r2, r1, #9
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a48:	f7fe fc3a 	bl	80002c0 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a54:	e058      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4611      	mov	r1, r2
 8001a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a70:	4642      	mov	r2, r8
 8001a72:	464b      	mov	r3, r9
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f04f 0100 	mov.w	r1, #0
 8001a7c:	0159      	lsls	r1, r3, #5
 8001a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a82:	0150      	lsls	r0, r2, #5
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4641      	mov	r1, r8
 8001a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a8e:	4649      	mov	r1, r9
 8001a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aac:	eb63 050b 	sbc.w	r5, r3, fp
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	00eb      	lsls	r3, r5, #3
 8001aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001abe:	00e2      	lsls	r2, r4, #3
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	18e3      	adds	r3, r4, r3
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	464b      	mov	r3, r9
 8001acc:	eb45 0303 	adc.w	r3, r5, r3
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ade:	4629      	mov	r1, r5
 8001ae0:	028b      	lsls	r3, r1, #10
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae8:	4621      	mov	r1, r4
 8001aea:	028a      	lsls	r2, r1, #10
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af2:	2200      	movs	r2, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	61fa      	str	r2, [r7, #28]
 8001af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afc:	f7fe fbe0 	bl	80002c0 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3750      	adds	r7, #80	; 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08004264 	.word	0x08004264

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffdc 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	08004264 	.word	0x08004264

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001bd0:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4977      	ldr	r1, [pc, #476]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	496b      	ldr	r1, [pc, #428]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001c2c:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	4960      	ldr	r1, [pc, #384]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001c58:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	4954      	ldr	r1, [pc, #336]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d022      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	494b      	ldr	r1, [pc, #300]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	493f      	ldr	r1, [pc, #252]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 808a 	beq.w	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cfa:	f7ff f92b 	bl	8000f54 <HAL_GetTick>
 8001cfe:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d02:	f7ff f927 	bl	8000f54 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1d1      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d28:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d02f      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d028      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d46:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d114      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f8f5 	bl	8000f54 <HAL_GetTick>
 8001d6a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff f8f1 	bl	8000f54 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e199      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d9c:	d114      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db2:	4902      	ldr	r1, [pc, #8]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42470e40 	.word	0x42470e40
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a88      	ldr	r2, [pc, #544]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dd2:	6093      	str	r3, [r2, #8]
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	4983      	ldr	r1, [pc, #524]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001df8:	4b7e      	ldr	r3, [pc, #504]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001dfa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001e08:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	4976      	ldr	r1, [pc, #472]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d011      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e2a:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	496d      	ldr	r1, [pc, #436]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e48:	d101      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e5a:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	4961      	ldr	r1, [pc, #388]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d004      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	f040 80c6 	bne.w	800200c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e80:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e86:	f7ff f865 	bl	8000f54 <HAL_GetTick>
 8001e8a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e8e:	f7ff f861 	bl	8000f54 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e10b      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001eac:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d023      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d019      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ef0:	d00e      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d019      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d115      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f0e:	d110      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	071b      	lsls	r3, r3, #28
 8001f2a:	4931      	ldr	r1, [pc, #196]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d026      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d122      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f60:	0e1b      	lsrs	r3, r3, #24
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	431a      	orrs	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	071b      	lsls	r3, r3, #28
 8001f80:	491b      	ldr	r1, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8e:	f023 021f 	bic.w	r2, r3, #31
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	4915      	ldr	r1, [pc, #84]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	071b      	lsls	r3, r3, #28
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe ffbe 	bl	8000f54 <HAL_GetTick>
 8001fd8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fda:	e011      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fdc:	f7fe ffba 	bl	8000f54 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d90a      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e064      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	424711e0 	.word	0x424711e0
 8001ff8:	42470068 	.word	0x42470068
 8001ffc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0e7      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002018:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	4926      	ldr	r1, [pc, #152]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800203c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002040:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	491d      	ldr	r1, [pc, #116]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	4915      	ldr	r1, [pc, #84]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8002080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002084:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4904      	ldr	r1, [pc, #16]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e273      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b82      	ldr	r3, [pc, #520]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e24e      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe feea 	bl	8000f54 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fee6 	bl	8000f54 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e213      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fed6 	bl	8000f54 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fed2 	bl	8000f54 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1ff      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1d3      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fe8b 	bl	8000f54 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe fe87 	bl	8000f54 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1b4      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fe6a 	bl	8000f54 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fe66 	bl	8000f54 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e193      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fe4a 	bl	8000f54 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fe46 	bl	8000f54 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e173      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fe33 	bl	8000f54 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe2f 	bl	8000f54 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e15c      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b8a      	ldr	r3, [pc, #552]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b83      	ldr	r3, [pc, #524]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7f      	ldr	r3, [pc, #508]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a7e      	ldr	r2, [pc, #504]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b7c      	ldr	r3, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x478>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b79      	ldr	r3, [pc, #484]	; (8002540 <HAL_RCC_OscConfig+0x47c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x47c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x47c>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7fe fdef 	bl	8000f54 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7fe fdeb 	bl	8000f54 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e118      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x47c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ea>
 80023a0:	4b66      	ldr	r3, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a65      	ldr	r2, [pc, #404]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x30c>
 80023b6:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a60      	ldr	r2, [pc, #384]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b5e      	ldr	r3, [pc, #376]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023d0:	4b5a      	ldr	r3, [pc, #360]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a59      	ldr	r2, [pc, #356]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	4b57      	ldr	r3, [pc, #348]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7fe fdb0 	bl	8000f54 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fdac 	bl	8000f54 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0d7      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fd9a 	bl	8000f54 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7fe fd96 	bl	8000f54 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0c1      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b40      	ldr	r3, [pc, #256]	; (800253c <HAL_RCC_OscConfig+0x478>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_OscConfig+0x478>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a3a      	ldr	r2, [pc, #232]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80ad 	beq.w	80025bc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d060      	beq.n	8002530 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d145      	bne.n	8002502 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <HAL_RCC_OscConfig+0x480>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fd6a 	bl	8000f54 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe fd66 	bl	8000f54 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e093      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	071b      	lsls	r3, r3, #28
 80024ce:	491b      	ldr	r1, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_OscConfig+0x480>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fd3b 	bl	8000f54 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fd37 	bl	8000f54 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e064      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x41e>
 8002500:	e05c      	b.n	80025bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_OscConfig+0x480>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fd24 	bl	8000f54 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fd20 	bl	8000f54 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e04d      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x44c>
 800252e:	e045      	b.n	80025bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e040      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
 800253c:	40023800 	.word	0x40023800
 8002540:	40007000 	.word	0x40007000
 8002544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_OscConfig+0x504>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d030      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d129      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d122      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800257e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d119      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d10f      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e03f      	b.n	800265e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fa5e 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2224      	movs	r2, #36	; 0x24
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800260e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f829 	bl	8002668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800266c:	b0c0      	sub	sp, #256	; 0x100
 800266e:	af00      	add	r7, sp, #0
 8002670:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	68d9      	ldr	r1, [r3, #12]
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	ea40 0301 	orr.w	r3, r0, r1
 8002690:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026c0:	f021 010c 	bic.w	r1, r1, #12
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026ce:	430b      	orrs	r3, r1
 80026d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	6999      	ldr	r1, [r3, #24]
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	ea40 0301 	orr.w	r3, r0, r1
 80026ee:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b95      	ldr	r3, [pc, #596]	; (800294c <UART_SetConfig+0x2e4>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d011      	beq.n	8002720 <UART_SetConfig+0xb8>
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <UART_SetConfig+0x2e8>)
 8002704:	429a      	cmp	r2, r3
 8002706:	d00b      	beq.n	8002720 <UART_SetConfig+0xb8>
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b91      	ldr	r3, [pc, #580]	; (8002954 <UART_SetConfig+0x2ec>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d005      	beq.n	8002720 <UART_SetConfig+0xb8>
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <UART_SetConfig+0x2f0>)
 800271c:	429a      	cmp	r2, r3
 800271e:	d104      	bne.n	800272a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002720:	f7ff fa30 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8002724:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002728:	e003      	b.n	8002732 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800272a:	f7ff fa17 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 800272e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	f040 8110 	bne.w	8002960 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002744:	2200      	movs	r2, #0
 8002746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800274a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800274e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002752:	4622      	mov	r2, r4
 8002754:	462b      	mov	r3, r5
 8002756:	1891      	adds	r1, r2, r2
 8002758:	65b9      	str	r1, [r7, #88]	; 0x58
 800275a:	415b      	adcs	r3, r3
 800275c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800275e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002762:	4621      	mov	r1, r4
 8002764:	eb12 0801 	adds.w	r8, r2, r1
 8002768:	4629      	mov	r1, r5
 800276a:	eb43 0901 	adc.w	r9, r3, r1
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800277a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800277e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	4623      	mov	r3, r4
 8002788:	eb18 0303 	adds.w	r3, r8, r3
 800278c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002790:	462b      	mov	r3, r5
 8002792:	eb49 0303 	adc.w	r3, r9, r3
 8002796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027ae:	460b      	mov	r3, r1
 80027b0:	18db      	adds	r3, r3, r3
 80027b2:	653b      	str	r3, [r7, #80]	; 0x50
 80027b4:	4613      	mov	r3, r2
 80027b6:	eb42 0303 	adc.w	r3, r2, r3
 80027ba:	657b      	str	r3, [r7, #84]	; 0x54
 80027bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027c4:	f7fd fd7c 	bl	80002c0 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4b63      	ldr	r3, [pc, #396]	; (800295c <UART_SetConfig+0x2f4>)
 80027ce:	fba3 2302 	umull	r2, r3, r3, r2
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	011c      	lsls	r4, r3, #4
 80027d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027e8:	4642      	mov	r2, r8
 80027ea:	464b      	mov	r3, r9
 80027ec:	1891      	adds	r1, r2, r2
 80027ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80027f0:	415b      	adcs	r3, r3
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027f8:	4641      	mov	r1, r8
 80027fa:	eb12 0a01 	adds.w	sl, r2, r1
 80027fe:	4649      	mov	r1, r9
 8002800:	eb43 0b01 	adc.w	fp, r3, r1
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002818:	4692      	mov	sl, r2
 800281a:	469b      	mov	fp, r3
 800281c:	4643      	mov	r3, r8
 800281e:	eb1a 0303 	adds.w	r3, sl, r3
 8002822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002826:	464b      	mov	r3, r9
 8002828:	eb4b 0303 	adc.w	r3, fp, r3
 800282c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800283c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002844:	460b      	mov	r3, r1
 8002846:	18db      	adds	r3, r3, r3
 8002848:	643b      	str	r3, [r7, #64]	; 0x40
 800284a:	4613      	mov	r3, r2
 800284c:	eb42 0303 	adc.w	r3, r2, r3
 8002850:	647b      	str	r3, [r7, #68]	; 0x44
 8002852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800285a:	f7fd fd31 	bl	80002c0 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4611      	mov	r1, r2
 8002864:	4b3d      	ldr	r3, [pc, #244]	; (800295c <UART_SetConfig+0x2f4>)
 8002866:	fba3 2301 	umull	r2, r3, r3, r1
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2264      	movs	r2, #100	; 0x64
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	1acb      	subs	r3, r1, r3
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <UART_SetConfig+0x2f4>)
 800287c:	fba3 2302 	umull	r2, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002888:	441c      	add	r4, r3
 800288a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288e:	2200      	movs	r2, #0
 8002890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002894:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800289c:	4642      	mov	r2, r8
 800289e:	464b      	mov	r3, r9
 80028a0:	1891      	adds	r1, r2, r2
 80028a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028a4:	415b      	adcs	r3, r3
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028ac:	4641      	mov	r1, r8
 80028ae:	1851      	adds	r1, r2, r1
 80028b0:	6339      	str	r1, [r7, #48]	; 0x30
 80028b2:	4649      	mov	r1, r9
 80028b4:	414b      	adcs	r3, r1
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028c4:	4659      	mov	r1, fp
 80028c6:	00cb      	lsls	r3, r1, #3
 80028c8:	4651      	mov	r1, sl
 80028ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ce:	4651      	mov	r1, sl
 80028d0:	00ca      	lsls	r2, r1, #3
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	4642      	mov	r2, r8
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028e0:	464b      	mov	r3, r9
 80028e2:	460a      	mov	r2, r1
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002900:	460b      	mov	r3, r1
 8002902:	18db      	adds	r3, r3, r3
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	4613      	mov	r3, r2
 8002908:	eb42 0303 	adc.w	r3, r2, r3
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002916:	f7fd fcd3 	bl	80002c0 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <UART_SetConfig+0x2f4>)
 8002920:	fba3 1302 	umull	r1, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	3332      	adds	r3, #50	; 0x32
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <UART_SetConfig+0x2f4>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	f003 0207 	and.w	r2, r3, #7
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4422      	add	r2, r4
 8002946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002948:	e109      	b.n	8002b5e <UART_SetConfig+0x4f6>
 800294a:	bf00      	nop
 800294c:	40011000 	.word	0x40011000
 8002950:	40011400 	.word	0x40011400
 8002954:	40011800 	.word	0x40011800
 8002958:	40011c00 	.word	0x40011c00
 800295c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800296a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800296e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002972:	4642      	mov	r2, r8
 8002974:	464b      	mov	r3, r9
 8002976:	1891      	adds	r1, r2, r2
 8002978:	6239      	str	r1, [r7, #32]
 800297a:	415b      	adcs	r3, r3
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002982:	4641      	mov	r1, r8
 8002984:	1854      	adds	r4, r2, r1
 8002986:	4649      	mov	r1, r9
 8002988:	eb43 0501 	adc.w	r5, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	00eb      	lsls	r3, r5, #3
 8002996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4643      	mov	r3, r8
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029a8:	464b      	mov	r3, r9
 80029aa:	eb45 0303 	adc.w	r3, r5, r3
 80029ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029ce:	4629      	mov	r1, r5
 80029d0:	008b      	lsls	r3, r1, #2
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d8:	4621      	mov	r1, r4
 80029da:	008a      	lsls	r2, r1, #2
 80029dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029e0:	f7fd fc6e 	bl	80002c0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <UART_SetConfig+0x504>)
 80029ea:	fba3 2302 	umull	r2, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	011c      	lsls	r4, r3, #4
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	61b9      	str	r1, [r7, #24]
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6139      	str	r1, [r7, #16]
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a48:	464b      	mov	r3, r9
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	008b      	lsls	r3, r1, #2
 8002a70:	4641      	mov	r1, r8
 8002a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a76:	4641      	mov	r1, r8
 8002a78:	008a      	lsls	r2, r1, #2
 8002a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a7e:	f7fd fc1f 	bl	80002c0 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <UART_SetConfig+0x504>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	2164      	movs	r1, #100	; 0x64
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	3332      	adds	r3, #50	; 0x32
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <UART_SetConfig+0x504>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa6:	441c      	add	r4, r3
 8002aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aac:	2200      	movs	r2, #0
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ab2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ab6:	4642      	mov	r2, r8
 8002ab8:	464b      	mov	r3, r9
 8002aba:	1891      	adds	r1, r2, r2
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	415b      	adcs	r3, r3
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1851      	adds	r1, r2, r1
 8002aca:	6039      	str	r1, [r7, #0]
 8002acc:	4649      	mov	r1, r9
 8002ace:	414b      	adcs	r3, r1
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ade:	4659      	mov	r1, fp
 8002ae0:	00cb      	lsls	r3, r1, #3
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae8:	4651      	mov	r1, sl
 8002aea:	00ca      	lsls	r2, r1, #3
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	4603      	mov	r3, r0
 8002af2:	4642      	mov	r2, r8
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b0c:	667a      	str	r2, [r7, #100]	; 0x64
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	008b      	lsls	r3, r1, #2
 8002b1e:	4641      	mov	r1, r8
 8002b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b24:	4641      	mov	r1, r8
 8002b26:	008a      	lsls	r2, r1, #2
 8002b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b2c:	f7fd fbc8 	bl	80002c0 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <UART_SetConfig+0x504>)
 8002b36:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2164      	movs	r1, #100	; 0x64
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <UART_SetConfig+0x504>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4422      	add	r2, r4
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	51eb851f 	.word	0x51eb851f

08002b70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b70:	b084      	sub	sp, #16
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	f107 001c 	add.w	r0, r7, #28
 8002b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d122      	bne.n	8002bce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa9c 	bl	8003100 <USB_CoreReset>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e01a      	b.n	8002c04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa90 	bl	8003100 <USB_CoreReset>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bf6:	e005      	b.n	8002c04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10b      	bne.n	8002c22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f043 0206 	orr.w	r2, r3, #6
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c2e:	b004      	add	sp, #16
 8002c30:	4770      	bx	lr

08002c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7fe f972 	bl	8000f6c <HAL_Delay>
      ms++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa28 	bl	80030e4 <USB_GetMode>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d01e      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b31      	cmp	r3, #49	; 0x31
 8002c9e:	d9f0      	bls.n	8002c82 <USB_SetCurrentMode+0x2e>
 8002ca0:	e01a      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fe f959 	bl	8000f6c <HAL_Delay>
      ms++;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa0f 	bl	80030e4 <USB_GetMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <USB_SetCurrentMode+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b31      	cmp	r3, #49	; 0x31
 8002cd0:	d9f0      	bls.n	8002cb4 <USB_SetCurrentMode+0x60>
 8002cd2:	e001      	b.n	8002cd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e005      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b32      	cmp	r3, #50	; 0x32
 8002cdc:	d101      	bne.n	8002ce2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e009      	b.n	8002d20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3340      	adds	r3, #64	; 0x40
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b0e      	cmp	r3, #14
 8002d24:	d9f2      	bls.n	8002d0c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11c      	bne.n	8002d66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e005      	b.n	8002d72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d84:	4619      	mov	r1, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	680b      	ldr	r3, [r1, #0]
 8002d90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f965 	bl	8003070 <USB_SetDevSpeed>
 8002da6:	e008      	b.n	8002dba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002da8:	2101      	movs	r1, #1
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f960 	bl	8003070 <USB_SetDevSpeed>
 8002db0:	e003      	b.n	8002dba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002db2:	2103      	movs	r1, #3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f95b 	bl	8003070 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dba:	2110      	movs	r1, #16
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8f3 	bl	8002fa8 <USB_FlushTxFifo>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f91f 	bl	8003010 <USB_FlushRxFifo>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	461a      	mov	r2, r3
 8002de4:	2300      	movs	r3, #0
 8002de6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	e043      	b.n	8002e8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e1c:	d118      	bne.n	8002e50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e013      	b.n	8002e62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e46:	461a      	mov	r2, r3
 8002e48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e008      	b.n	8002e62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2300      	movs	r3, #0
 8002e72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e80:	461a      	mov	r2, r3
 8002e82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3b7      	bcc.n	8002e06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	e043      	b.n	8002f24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb2:	d118      	bne.n	8002ee6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e013      	b.n	8002ef8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e008      	b.n	8002ef8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	2300      	movs	r3, #0
 8002f08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	461a      	mov	r2, r3
 8002f18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3301      	adds	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3b7      	bcc.n	8002e9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <USB_DevInit+0x2b8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f043 0208 	orr.w	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d107      	bne.n	8002f94 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fa0:	b004      	add	sp, #16
 8002fa2:	4770      	bx	lr
 8002fa4:	803c3800 	.word	0x803c3800

08002fa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	; (800300c <USB_FlushTxFifo+0x64>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e01b      	b.n	8003000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	daf2      	bge.n	8002fb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	019b      	lsls	r3, r3, #6
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <USB_FlushTxFifo+0x64>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e006      	b.n	8003000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d0f0      	beq.n	8002fe0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	00030d40 	.word	0x00030d40

08003010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <USB_FlushRxFifo+0x5c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e018      	b.n	8003060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	daf2      	bge.n	800301c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2210      	movs	r2, #16
 800303e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <USB_FlushRxFifo+0x5c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e006      	b.n	8003060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b10      	cmp	r3, #16
 800305c:	d0f0      	beq.n	8003040 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	00030d40 	.word	0x00030d40

08003070 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80030bc:	f023 0303 	bic.w	r3, r3, #3
 80030c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0301 	and.w	r3, r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3301      	adds	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a13      	ldr	r2, [pc, #76]	; (8003164 <USB_CoreReset+0x64>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e01b      	b.n	8003156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	daf2      	bge.n	800310c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <USB_CoreReset+0x64>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e006      	b.n	8003156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d0f0      	beq.n	8003136 <USB_CoreReset+0x36>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	00030d40 	.word	0x00030d40

08003168 <__errno>:
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <__errno+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	2000000c 	.word	0x2000000c

08003174 <__libc_init_array>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4d0d      	ldr	r5, [pc, #52]	; (80031ac <__libc_init_array+0x38>)
 8003178:	4c0d      	ldr	r4, [pc, #52]	; (80031b0 <__libc_init_array+0x3c>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	2600      	movs	r6, #0
 8003180:	42a6      	cmp	r6, r4
 8003182:	d109      	bne.n	8003198 <__libc_init_array+0x24>
 8003184:	4d0b      	ldr	r5, [pc, #44]	; (80031b4 <__libc_init_array+0x40>)
 8003186:	4c0c      	ldr	r4, [pc, #48]	; (80031b8 <__libc_init_array+0x44>)
 8003188:	f001 f858 	bl	800423c <_init>
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	2600      	movs	r6, #0
 8003192:	42a6      	cmp	r6, r4
 8003194:	d105      	bne.n	80031a2 <__libc_init_array+0x2e>
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	f855 3b04 	ldr.w	r3, [r5], #4
 800319c:	4798      	blx	r3
 800319e:	3601      	adds	r6, #1
 80031a0:	e7ee      	b.n	8003180 <__libc_init_array+0xc>
 80031a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a6:	4798      	blx	r3
 80031a8:	3601      	adds	r6, #1
 80031aa:	e7f2      	b.n	8003192 <__libc_init_array+0x1e>
 80031ac:	080043bc 	.word	0x080043bc
 80031b0:	080043bc 	.word	0x080043bc
 80031b4:	080043bc 	.word	0x080043bc
 80031b8:	080043c0 	.word	0x080043c0

080031bc <memset>:
 80031bc:	4402      	add	r2, r0
 80031be:	4603      	mov	r3, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <rand>:
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <rand+0x5c>)
 80031ce:	b510      	push	{r4, lr}
 80031d0:	681c      	ldr	r4, [r3, #0]
 80031d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d4:	b9b3      	cbnz	r3, 8003204 <rand+0x38>
 80031d6:	2018      	movs	r0, #24
 80031d8:	f000 f866 	bl	80032a8 <malloc>
 80031dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80031de:	b928      	cbnz	r0, 80031ec <rand+0x20>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <rand+0x60>)
 80031e4:	4812      	ldr	r0, [pc, #72]	; (8003230 <rand+0x64>)
 80031e6:	214e      	movs	r1, #78	; 0x4e
 80031e8:	f000 f82e 	bl	8003248 <__assert_func>
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <rand+0x68>)
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <rand+0x6c>)
 80031f0:	e9c0 2300 	strd	r2, r3, [r0]
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <rand+0x70>)
 80031f6:	6083      	str	r3, [r0, #8]
 80031f8:	230b      	movs	r3, #11
 80031fa:	8183      	strh	r3, [r0, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	2300      	movs	r3, #0
 8003200:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003204:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <rand+0x74>)
 8003208:	6920      	ldr	r0, [r4, #16]
 800320a:	6963      	ldr	r3, [r4, #20]
 800320c:	490d      	ldr	r1, [pc, #52]	; (8003244 <rand+0x78>)
 800320e:	4342      	muls	r2, r0
 8003210:	fb01 2203 	mla	r2, r1, r3, r2
 8003214:	fba0 0101 	umull	r0, r1, r0, r1
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	eb42 0001 	adc.w	r0, r2, r1
 800321e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003222:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003226:	bd10      	pop	{r4, pc}
 8003228:	2000000c 	.word	0x2000000c
 800322c:	08004270 	.word	0x08004270
 8003230:	08004287 	.word	0x08004287
 8003234:	abcd330e 	.word	0xabcd330e
 8003238:	e66d1234 	.word	0xe66d1234
 800323c:	0005deec 	.word	0x0005deec
 8003240:	5851f42d 	.word	0x5851f42d
 8003244:	4c957f2d 	.word	0x4c957f2d

08003248 <__assert_func>:
 8003248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800324a:	4614      	mov	r4, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <__assert_func+0x2c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4605      	mov	r5, r0
 8003254:	68d8      	ldr	r0, [r3, #12]
 8003256:	b14c      	cbz	r4, 800326c <__assert_func+0x24>
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <__assert_func+0x30>)
 800325a:	9100      	str	r1, [sp, #0]
 800325c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <__assert_func+0x34>)
 8003262:	462b      	mov	r3, r5
 8003264:	f000 f80e 	bl	8003284 <fiprintf>
 8003268:	f000 fcc4 	bl	8003bf4 <abort>
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__assert_func+0x38>)
 800326e:	461c      	mov	r4, r3
 8003270:	e7f3      	b.n	800325a <__assert_func+0x12>
 8003272:	bf00      	nop
 8003274:	2000000c 	.word	0x2000000c
 8003278:	080042e2 	.word	0x080042e2
 800327c:	080042ef 	.word	0x080042ef
 8003280:	0800431d 	.word	0x0800431d

08003284 <fiprintf>:
 8003284:	b40e      	push	{r1, r2, r3}
 8003286:	b503      	push	{r0, r1, lr}
 8003288:	4601      	mov	r1, r0
 800328a:	ab03      	add	r3, sp, #12
 800328c:	4805      	ldr	r0, [pc, #20]	; (80032a4 <fiprintf+0x20>)
 800328e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003292:	6800      	ldr	r0, [r0, #0]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f000 f919 	bl	80034cc <_vfiprintf_r>
 800329a:	b002      	add	sp, #8
 800329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a0:	b003      	add	sp, #12
 80032a2:	4770      	bx	lr
 80032a4:	2000000c 	.word	0x2000000c

080032a8 <malloc>:
 80032a8:	4b02      	ldr	r3, [pc, #8]	; (80032b4 <malloc+0xc>)
 80032aa:	4601      	mov	r1, r0
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f000 b86f 	b.w	8003390 <_malloc_r>
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <_free_r>:
 80032b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032ba:	2900      	cmp	r1, #0
 80032bc:	d044      	beq.n	8003348 <_free_r+0x90>
 80032be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c2:	9001      	str	r0, [sp, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f1a1 0404 	sub.w	r4, r1, #4
 80032ca:	bfb8      	it	lt
 80032cc:	18e4      	addlt	r4, r4, r3
 80032ce:	f000 feb9 	bl	8004044 <__malloc_lock>
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <_free_r+0x94>)
 80032d4:	9801      	ldr	r0, [sp, #4]
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	b933      	cbnz	r3, 80032e8 <_free_r+0x30>
 80032da:	6063      	str	r3, [r4, #4]
 80032dc:	6014      	str	r4, [r2, #0]
 80032de:	b003      	add	sp, #12
 80032e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032e4:	f000 beb4 	b.w	8004050 <__malloc_unlock>
 80032e8:	42a3      	cmp	r3, r4
 80032ea:	d908      	bls.n	80032fe <_free_r+0x46>
 80032ec:	6825      	ldr	r5, [r4, #0]
 80032ee:	1961      	adds	r1, r4, r5
 80032f0:	428b      	cmp	r3, r1
 80032f2:	bf01      	itttt	eq
 80032f4:	6819      	ldreq	r1, [r3, #0]
 80032f6:	685b      	ldreq	r3, [r3, #4]
 80032f8:	1949      	addeq	r1, r1, r5
 80032fa:	6021      	streq	r1, [r4, #0]
 80032fc:	e7ed      	b.n	80032da <_free_r+0x22>
 80032fe:	461a      	mov	r2, r3
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	b10b      	cbz	r3, 8003308 <_free_r+0x50>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d9fa      	bls.n	80032fe <_free_r+0x46>
 8003308:	6811      	ldr	r1, [r2, #0]
 800330a:	1855      	adds	r5, r2, r1
 800330c:	42a5      	cmp	r5, r4
 800330e:	d10b      	bne.n	8003328 <_free_r+0x70>
 8003310:	6824      	ldr	r4, [r4, #0]
 8003312:	4421      	add	r1, r4
 8003314:	1854      	adds	r4, r2, r1
 8003316:	42a3      	cmp	r3, r4
 8003318:	6011      	str	r1, [r2, #0]
 800331a:	d1e0      	bne.n	80032de <_free_r+0x26>
 800331c:	681c      	ldr	r4, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	6053      	str	r3, [r2, #4]
 8003322:	4421      	add	r1, r4
 8003324:	6011      	str	r1, [r2, #0]
 8003326:	e7da      	b.n	80032de <_free_r+0x26>
 8003328:	d902      	bls.n	8003330 <_free_r+0x78>
 800332a:	230c      	movs	r3, #12
 800332c:	6003      	str	r3, [r0, #0]
 800332e:	e7d6      	b.n	80032de <_free_r+0x26>
 8003330:	6825      	ldr	r5, [r4, #0]
 8003332:	1961      	adds	r1, r4, r5
 8003334:	428b      	cmp	r3, r1
 8003336:	bf04      	itt	eq
 8003338:	6819      	ldreq	r1, [r3, #0]
 800333a:	685b      	ldreq	r3, [r3, #4]
 800333c:	6063      	str	r3, [r4, #4]
 800333e:	bf04      	itt	eq
 8003340:	1949      	addeq	r1, r1, r5
 8003342:	6021      	streq	r1, [r4, #0]
 8003344:	6054      	str	r4, [r2, #4]
 8003346:	e7ca      	b.n	80032de <_free_r+0x26>
 8003348:	b003      	add	sp, #12
 800334a:	bd30      	pop	{r4, r5, pc}
 800334c:	200005e4 	.word	0x200005e4

08003350 <sbrk_aligned>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4e0e      	ldr	r6, [pc, #56]	; (800338c <sbrk_aligned+0x3c>)
 8003354:	460c      	mov	r4, r1
 8003356:	6831      	ldr	r1, [r6, #0]
 8003358:	4605      	mov	r5, r0
 800335a:	b911      	cbnz	r1, 8003362 <sbrk_aligned+0x12>
 800335c:	f000 fb7a 	bl	8003a54 <_sbrk_r>
 8003360:	6030      	str	r0, [r6, #0]
 8003362:	4621      	mov	r1, r4
 8003364:	4628      	mov	r0, r5
 8003366:	f000 fb75 	bl	8003a54 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d00a      	beq.n	8003384 <sbrk_aligned+0x34>
 800336e:	1cc4      	adds	r4, r0, #3
 8003370:	f024 0403 	bic.w	r4, r4, #3
 8003374:	42a0      	cmp	r0, r4
 8003376:	d007      	beq.n	8003388 <sbrk_aligned+0x38>
 8003378:	1a21      	subs	r1, r4, r0
 800337a:	4628      	mov	r0, r5
 800337c:	f000 fb6a 	bl	8003a54 <_sbrk_r>
 8003380:	3001      	adds	r0, #1
 8003382:	d101      	bne.n	8003388 <sbrk_aligned+0x38>
 8003384:	f04f 34ff 	mov.w	r4, #4294967295
 8003388:	4620      	mov	r0, r4
 800338a:	bd70      	pop	{r4, r5, r6, pc}
 800338c:	200005e8 	.word	0x200005e8

08003390 <_malloc_r>:
 8003390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003394:	1ccd      	adds	r5, r1, #3
 8003396:	f025 0503 	bic.w	r5, r5, #3
 800339a:	3508      	adds	r5, #8
 800339c:	2d0c      	cmp	r5, #12
 800339e:	bf38      	it	cc
 80033a0:	250c      	movcc	r5, #12
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	4607      	mov	r7, r0
 80033a6:	db01      	blt.n	80033ac <_malloc_r+0x1c>
 80033a8:	42a9      	cmp	r1, r5
 80033aa:	d905      	bls.n	80033b8 <_malloc_r+0x28>
 80033ac:	230c      	movs	r3, #12
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	2600      	movs	r6, #0
 80033b2:	4630      	mov	r0, r6
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	4e2e      	ldr	r6, [pc, #184]	; (8003474 <_malloc_r+0xe4>)
 80033ba:	f000 fe43 	bl	8004044 <__malloc_lock>
 80033be:	6833      	ldr	r3, [r6, #0]
 80033c0:	461c      	mov	r4, r3
 80033c2:	bb34      	cbnz	r4, 8003412 <_malloc_r+0x82>
 80033c4:	4629      	mov	r1, r5
 80033c6:	4638      	mov	r0, r7
 80033c8:	f7ff ffc2 	bl	8003350 <sbrk_aligned>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	4604      	mov	r4, r0
 80033d0:	d14d      	bne.n	800346e <_malloc_r+0xde>
 80033d2:	6834      	ldr	r4, [r6, #0]
 80033d4:	4626      	mov	r6, r4
 80033d6:	2e00      	cmp	r6, #0
 80033d8:	d140      	bne.n	800345c <_malloc_r+0xcc>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	4631      	mov	r1, r6
 80033de:	4638      	mov	r0, r7
 80033e0:	eb04 0803 	add.w	r8, r4, r3
 80033e4:	f000 fb36 	bl	8003a54 <_sbrk_r>
 80033e8:	4580      	cmp	r8, r0
 80033ea:	d13a      	bne.n	8003462 <_malloc_r+0xd2>
 80033ec:	6821      	ldr	r1, [r4, #0]
 80033ee:	3503      	adds	r5, #3
 80033f0:	1a6d      	subs	r5, r5, r1
 80033f2:	f025 0503 	bic.w	r5, r5, #3
 80033f6:	3508      	adds	r5, #8
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	bf38      	it	cc
 80033fc:	250c      	movcc	r5, #12
 80033fe:	4629      	mov	r1, r5
 8003400:	4638      	mov	r0, r7
 8003402:	f7ff ffa5 	bl	8003350 <sbrk_aligned>
 8003406:	3001      	adds	r0, #1
 8003408:	d02b      	beq.n	8003462 <_malloc_r+0xd2>
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	442b      	add	r3, r5
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	e00e      	b.n	8003430 <_malloc_r+0xa0>
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	1b52      	subs	r2, r2, r5
 8003416:	d41e      	bmi.n	8003456 <_malloc_r+0xc6>
 8003418:	2a0b      	cmp	r2, #11
 800341a:	d916      	bls.n	800344a <_malloc_r+0xba>
 800341c:	1961      	adds	r1, r4, r5
 800341e:	42a3      	cmp	r3, r4
 8003420:	6025      	str	r5, [r4, #0]
 8003422:	bf18      	it	ne
 8003424:	6059      	strne	r1, [r3, #4]
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	bf08      	it	eq
 800342a:	6031      	streq	r1, [r6, #0]
 800342c:	5162      	str	r2, [r4, r5]
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	4638      	mov	r0, r7
 8003432:	f104 060b 	add.w	r6, r4, #11
 8003436:	f000 fe0b 	bl	8004050 <__malloc_unlock>
 800343a:	f026 0607 	bic.w	r6, r6, #7
 800343e:	1d23      	adds	r3, r4, #4
 8003440:	1af2      	subs	r2, r6, r3
 8003442:	d0b6      	beq.n	80033b2 <_malloc_r+0x22>
 8003444:	1b9b      	subs	r3, r3, r6
 8003446:	50a3      	str	r3, [r4, r2]
 8003448:	e7b3      	b.n	80033b2 <_malloc_r+0x22>
 800344a:	6862      	ldr	r2, [r4, #4]
 800344c:	42a3      	cmp	r3, r4
 800344e:	bf0c      	ite	eq
 8003450:	6032      	streq	r2, [r6, #0]
 8003452:	605a      	strne	r2, [r3, #4]
 8003454:	e7ec      	b.n	8003430 <_malloc_r+0xa0>
 8003456:	4623      	mov	r3, r4
 8003458:	6864      	ldr	r4, [r4, #4]
 800345a:	e7b2      	b.n	80033c2 <_malloc_r+0x32>
 800345c:	4634      	mov	r4, r6
 800345e:	6876      	ldr	r6, [r6, #4]
 8003460:	e7b9      	b.n	80033d6 <_malloc_r+0x46>
 8003462:	230c      	movs	r3, #12
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4638      	mov	r0, r7
 8003468:	f000 fdf2 	bl	8004050 <__malloc_unlock>
 800346c:	e7a1      	b.n	80033b2 <_malloc_r+0x22>
 800346e:	6025      	str	r5, [r4, #0]
 8003470:	e7de      	b.n	8003430 <_malloc_r+0xa0>
 8003472:	bf00      	nop
 8003474:	200005e4 	.word	0x200005e4

08003478 <__sfputc_r>:
 8003478:	6893      	ldr	r3, [r2, #8]
 800347a:	3b01      	subs	r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	b410      	push	{r4}
 8003480:	6093      	str	r3, [r2, #8]
 8003482:	da08      	bge.n	8003496 <__sfputc_r+0x1e>
 8003484:	6994      	ldr	r4, [r2, #24]
 8003486:	42a3      	cmp	r3, r4
 8003488:	db01      	blt.n	800348e <__sfputc_r+0x16>
 800348a:	290a      	cmp	r1, #10
 800348c:	d103      	bne.n	8003496 <__sfputc_r+0x1e>
 800348e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003492:	f000 baef 	b.w	8003a74 <__swbuf_r>
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	1c58      	adds	r0, r3, #1
 800349a:	6010      	str	r0, [r2, #0]
 800349c:	7019      	strb	r1, [r3, #0]
 800349e:	4608      	mov	r0, r1
 80034a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <__sfputs_r>:
 80034a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a8:	4606      	mov	r6, r0
 80034aa:	460f      	mov	r7, r1
 80034ac:	4614      	mov	r4, r2
 80034ae:	18d5      	adds	r5, r2, r3
 80034b0:	42ac      	cmp	r4, r5
 80034b2:	d101      	bne.n	80034b8 <__sfputs_r+0x12>
 80034b4:	2000      	movs	r0, #0
 80034b6:	e007      	b.n	80034c8 <__sfputs_r+0x22>
 80034b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034bc:	463a      	mov	r2, r7
 80034be:	4630      	mov	r0, r6
 80034c0:	f7ff ffda 	bl	8003478 <__sfputc_r>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d1f3      	bne.n	80034b0 <__sfputs_r+0xa>
 80034c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034cc <_vfiprintf_r>:
 80034cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d0:	460d      	mov	r5, r1
 80034d2:	b09d      	sub	sp, #116	; 0x74
 80034d4:	4614      	mov	r4, r2
 80034d6:	4698      	mov	r8, r3
 80034d8:	4606      	mov	r6, r0
 80034da:	b118      	cbz	r0, 80034e4 <_vfiprintf_r+0x18>
 80034dc:	6983      	ldr	r3, [r0, #24]
 80034de:	b90b      	cbnz	r3, 80034e4 <_vfiprintf_r+0x18>
 80034e0:	f000 fcaa 	bl	8003e38 <__sinit>
 80034e4:	4b89      	ldr	r3, [pc, #548]	; (800370c <_vfiprintf_r+0x240>)
 80034e6:	429d      	cmp	r5, r3
 80034e8:	d11b      	bne.n	8003522 <_vfiprintf_r+0x56>
 80034ea:	6875      	ldr	r5, [r6, #4]
 80034ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034ee:	07d9      	lsls	r1, r3, #31
 80034f0:	d405      	bmi.n	80034fe <_vfiprintf_r+0x32>
 80034f2:	89ab      	ldrh	r3, [r5, #12]
 80034f4:	059a      	lsls	r2, r3, #22
 80034f6:	d402      	bmi.n	80034fe <_vfiprintf_r+0x32>
 80034f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034fa:	f000 fd3b 	bl	8003f74 <__retarget_lock_acquire_recursive>
 80034fe:	89ab      	ldrh	r3, [r5, #12]
 8003500:	071b      	lsls	r3, r3, #28
 8003502:	d501      	bpl.n	8003508 <_vfiprintf_r+0x3c>
 8003504:	692b      	ldr	r3, [r5, #16]
 8003506:	b9eb      	cbnz	r3, 8003544 <_vfiprintf_r+0x78>
 8003508:	4629      	mov	r1, r5
 800350a:	4630      	mov	r0, r6
 800350c:	f000 fb04 	bl	8003b18 <__swsetup_r>
 8003510:	b1c0      	cbz	r0, 8003544 <_vfiprintf_r+0x78>
 8003512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003514:	07dc      	lsls	r4, r3, #31
 8003516:	d50e      	bpl.n	8003536 <_vfiprintf_r+0x6a>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	b01d      	add	sp, #116	; 0x74
 800351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003522:	4b7b      	ldr	r3, [pc, #492]	; (8003710 <_vfiprintf_r+0x244>)
 8003524:	429d      	cmp	r5, r3
 8003526:	d101      	bne.n	800352c <_vfiprintf_r+0x60>
 8003528:	68b5      	ldr	r5, [r6, #8]
 800352a:	e7df      	b.n	80034ec <_vfiprintf_r+0x20>
 800352c:	4b79      	ldr	r3, [pc, #484]	; (8003714 <_vfiprintf_r+0x248>)
 800352e:	429d      	cmp	r5, r3
 8003530:	bf08      	it	eq
 8003532:	68f5      	ldreq	r5, [r6, #12]
 8003534:	e7da      	b.n	80034ec <_vfiprintf_r+0x20>
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	0598      	lsls	r0, r3, #22
 800353a:	d4ed      	bmi.n	8003518 <_vfiprintf_r+0x4c>
 800353c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800353e:	f000 fd1a 	bl	8003f76 <__retarget_lock_release_recursive>
 8003542:	e7e9      	b.n	8003518 <_vfiprintf_r+0x4c>
 8003544:	2300      	movs	r3, #0
 8003546:	9309      	str	r3, [sp, #36]	; 0x24
 8003548:	2320      	movs	r3, #32
 800354a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800354e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003552:	2330      	movs	r3, #48	; 0x30
 8003554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003718 <_vfiprintf_r+0x24c>
 8003558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800355c:	f04f 0901 	mov.w	r9, #1
 8003560:	4623      	mov	r3, r4
 8003562:	469a      	mov	sl, r3
 8003564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003568:	b10a      	cbz	r2, 800356e <_vfiprintf_r+0xa2>
 800356a:	2a25      	cmp	r2, #37	; 0x25
 800356c:	d1f9      	bne.n	8003562 <_vfiprintf_r+0x96>
 800356e:	ebba 0b04 	subs.w	fp, sl, r4
 8003572:	d00b      	beq.n	800358c <_vfiprintf_r+0xc0>
 8003574:	465b      	mov	r3, fp
 8003576:	4622      	mov	r2, r4
 8003578:	4629      	mov	r1, r5
 800357a:	4630      	mov	r0, r6
 800357c:	f7ff ff93 	bl	80034a6 <__sfputs_r>
 8003580:	3001      	adds	r0, #1
 8003582:	f000 80aa 	beq.w	80036da <_vfiprintf_r+0x20e>
 8003586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003588:	445a      	add	r2, fp
 800358a:	9209      	str	r2, [sp, #36]	; 0x24
 800358c:	f89a 3000 	ldrb.w	r3, [sl]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a2 	beq.w	80036da <_vfiprintf_r+0x20e>
 8003596:	2300      	movs	r3, #0
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a0:	f10a 0a01 	add.w	sl, sl, #1
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ac:	931a      	str	r3, [sp, #104]	; 0x68
 80035ae:	4654      	mov	r4, sl
 80035b0:	2205      	movs	r2, #5
 80035b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b6:	4858      	ldr	r0, [pc, #352]	; (8003718 <_vfiprintf_r+0x24c>)
 80035b8:	f7fc fe32 	bl	8000220 <memchr>
 80035bc:	9a04      	ldr	r2, [sp, #16]
 80035be:	b9d8      	cbnz	r0, 80035f8 <_vfiprintf_r+0x12c>
 80035c0:	06d1      	lsls	r1, r2, #27
 80035c2:	bf44      	itt	mi
 80035c4:	2320      	movmi	r3, #32
 80035c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ca:	0713      	lsls	r3, r2, #28
 80035cc:	bf44      	itt	mi
 80035ce:	232b      	movmi	r3, #43	; 0x2b
 80035d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d4:	f89a 3000 	ldrb.w	r3, [sl]
 80035d8:	2b2a      	cmp	r3, #42	; 0x2a
 80035da:	d015      	beq.n	8003608 <_vfiprintf_r+0x13c>
 80035dc:	9a07      	ldr	r2, [sp, #28]
 80035de:	4654      	mov	r4, sl
 80035e0:	2000      	movs	r0, #0
 80035e2:	f04f 0c0a 	mov.w	ip, #10
 80035e6:	4621      	mov	r1, r4
 80035e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ec:	3b30      	subs	r3, #48	; 0x30
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d94e      	bls.n	8003690 <_vfiprintf_r+0x1c4>
 80035f2:	b1b0      	cbz	r0, 8003622 <_vfiprintf_r+0x156>
 80035f4:	9207      	str	r2, [sp, #28]
 80035f6:	e014      	b.n	8003622 <_vfiprintf_r+0x156>
 80035f8:	eba0 0308 	sub.w	r3, r0, r8
 80035fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	9304      	str	r3, [sp, #16]
 8003604:	46a2      	mov	sl, r4
 8003606:	e7d2      	b.n	80035ae <_vfiprintf_r+0xe2>
 8003608:	9b03      	ldr	r3, [sp, #12]
 800360a:	1d19      	adds	r1, r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	9103      	str	r1, [sp, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	bfbb      	ittet	lt
 8003614:	425b      	neglt	r3, r3
 8003616:	f042 0202 	orrlt.w	r2, r2, #2
 800361a:	9307      	strge	r3, [sp, #28]
 800361c:	9307      	strlt	r3, [sp, #28]
 800361e:	bfb8      	it	lt
 8003620:	9204      	strlt	r2, [sp, #16]
 8003622:	7823      	ldrb	r3, [r4, #0]
 8003624:	2b2e      	cmp	r3, #46	; 0x2e
 8003626:	d10c      	bne.n	8003642 <_vfiprintf_r+0x176>
 8003628:	7863      	ldrb	r3, [r4, #1]
 800362a:	2b2a      	cmp	r3, #42	; 0x2a
 800362c:	d135      	bne.n	800369a <_vfiprintf_r+0x1ce>
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	1d1a      	adds	r2, r3, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	9203      	str	r2, [sp, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	bfb8      	it	lt
 800363a:	f04f 33ff 	movlt.w	r3, #4294967295
 800363e:	3402      	adds	r4, #2
 8003640:	9305      	str	r3, [sp, #20]
 8003642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003728 <_vfiprintf_r+0x25c>
 8003646:	7821      	ldrb	r1, [r4, #0]
 8003648:	2203      	movs	r2, #3
 800364a:	4650      	mov	r0, sl
 800364c:	f7fc fde8 	bl	8000220 <memchr>
 8003650:	b140      	cbz	r0, 8003664 <_vfiprintf_r+0x198>
 8003652:	2340      	movs	r3, #64	; 0x40
 8003654:	eba0 000a 	sub.w	r0, r0, sl
 8003658:	fa03 f000 	lsl.w	r0, r3, r0
 800365c:	9b04      	ldr	r3, [sp, #16]
 800365e:	4303      	orrs	r3, r0
 8003660:	3401      	adds	r4, #1
 8003662:	9304      	str	r3, [sp, #16]
 8003664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003668:	482c      	ldr	r0, [pc, #176]	; (800371c <_vfiprintf_r+0x250>)
 800366a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800366e:	2206      	movs	r2, #6
 8003670:	f7fc fdd6 	bl	8000220 <memchr>
 8003674:	2800      	cmp	r0, #0
 8003676:	d03f      	beq.n	80036f8 <_vfiprintf_r+0x22c>
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <_vfiprintf_r+0x254>)
 800367a:	bb1b      	cbnz	r3, 80036c4 <_vfiprintf_r+0x1f8>
 800367c:	9b03      	ldr	r3, [sp, #12]
 800367e:	3307      	adds	r3, #7
 8003680:	f023 0307 	bic.w	r3, r3, #7
 8003684:	3308      	adds	r3, #8
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800368a:	443b      	add	r3, r7
 800368c:	9309      	str	r3, [sp, #36]	; 0x24
 800368e:	e767      	b.n	8003560 <_vfiprintf_r+0x94>
 8003690:	fb0c 3202 	mla	r2, ip, r2, r3
 8003694:	460c      	mov	r4, r1
 8003696:	2001      	movs	r0, #1
 8003698:	e7a5      	b.n	80035e6 <_vfiprintf_r+0x11a>
 800369a:	2300      	movs	r3, #0
 800369c:	3401      	adds	r4, #1
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f04f 0c0a 	mov.w	ip, #10
 80036a6:	4620      	mov	r0, r4
 80036a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ac:	3a30      	subs	r2, #48	; 0x30
 80036ae:	2a09      	cmp	r2, #9
 80036b0:	d903      	bls.n	80036ba <_vfiprintf_r+0x1ee>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0c5      	beq.n	8003642 <_vfiprintf_r+0x176>
 80036b6:	9105      	str	r1, [sp, #20]
 80036b8:	e7c3      	b.n	8003642 <_vfiprintf_r+0x176>
 80036ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80036be:	4604      	mov	r4, r0
 80036c0:	2301      	movs	r3, #1
 80036c2:	e7f0      	b.n	80036a6 <_vfiprintf_r+0x1da>
 80036c4:	ab03      	add	r3, sp, #12
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	462a      	mov	r2, r5
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <_vfiprintf_r+0x258>)
 80036cc:	a904      	add	r1, sp, #16
 80036ce:	4630      	mov	r0, r6
 80036d0:	f3af 8000 	nop.w
 80036d4:	4607      	mov	r7, r0
 80036d6:	1c78      	adds	r0, r7, #1
 80036d8:	d1d6      	bne.n	8003688 <_vfiprintf_r+0x1bc>
 80036da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036dc:	07d9      	lsls	r1, r3, #31
 80036de:	d405      	bmi.n	80036ec <_vfiprintf_r+0x220>
 80036e0:	89ab      	ldrh	r3, [r5, #12]
 80036e2:	059a      	lsls	r2, r3, #22
 80036e4:	d402      	bmi.n	80036ec <_vfiprintf_r+0x220>
 80036e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e8:	f000 fc45 	bl	8003f76 <__retarget_lock_release_recursive>
 80036ec:	89ab      	ldrh	r3, [r5, #12]
 80036ee:	065b      	lsls	r3, r3, #25
 80036f0:	f53f af12 	bmi.w	8003518 <_vfiprintf_r+0x4c>
 80036f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036f6:	e711      	b.n	800351c <_vfiprintf_r+0x50>
 80036f8:	ab03      	add	r3, sp, #12
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	462a      	mov	r2, r5
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <_vfiprintf_r+0x258>)
 8003700:	a904      	add	r1, sp, #16
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f880 	bl	8003808 <_printf_i>
 8003708:	e7e4      	b.n	80036d4 <_vfiprintf_r+0x208>
 800370a:	bf00      	nop
 800370c:	08004374 	.word	0x08004374
 8003710:	08004394 	.word	0x08004394
 8003714:	08004354 	.word	0x08004354
 8003718:	0800431e 	.word	0x0800431e
 800371c:	08004328 	.word	0x08004328
 8003720:	00000000 	.word	0x00000000
 8003724:	080034a7 	.word	0x080034a7
 8003728:	08004324 	.word	0x08004324

0800372c <_printf_common>:
 800372c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	4616      	mov	r6, r2
 8003732:	4699      	mov	r9, r3
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	690b      	ldr	r3, [r1, #16]
 8003738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800373c:	4293      	cmp	r3, r2
 800373e:	bfb8      	it	lt
 8003740:	4613      	movlt	r3, r2
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003748:	4607      	mov	r7, r0
 800374a:	460c      	mov	r4, r1
 800374c:	b10a      	cbz	r2, 8003752 <_printf_common+0x26>
 800374e:	3301      	adds	r3, #1
 8003750:	6033      	str	r3, [r6, #0]
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	0699      	lsls	r1, r3, #26
 8003756:	bf42      	ittt	mi
 8003758:	6833      	ldrmi	r3, [r6, #0]
 800375a:	3302      	addmi	r3, #2
 800375c:	6033      	strmi	r3, [r6, #0]
 800375e:	6825      	ldr	r5, [r4, #0]
 8003760:	f015 0506 	ands.w	r5, r5, #6
 8003764:	d106      	bne.n	8003774 <_printf_common+0x48>
 8003766:	f104 0a19 	add.w	sl, r4, #25
 800376a:	68e3      	ldr	r3, [r4, #12]
 800376c:	6832      	ldr	r2, [r6, #0]
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	42ab      	cmp	r3, r5
 8003772:	dc26      	bgt.n	80037c2 <_printf_common+0x96>
 8003774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003778:	1e13      	subs	r3, r2, #0
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	bf18      	it	ne
 800377e:	2301      	movne	r3, #1
 8003780:	0692      	lsls	r2, r2, #26
 8003782:	d42b      	bmi.n	80037dc <_printf_common+0xb0>
 8003784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003788:	4649      	mov	r1, r9
 800378a:	4638      	mov	r0, r7
 800378c:	47c0      	blx	r8
 800378e:	3001      	adds	r0, #1
 8003790:	d01e      	beq.n	80037d0 <_printf_common+0xa4>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	68e5      	ldr	r5, [r4, #12]
 8003796:	6832      	ldr	r2, [r6, #0]
 8003798:	f003 0306 	and.w	r3, r3, #6
 800379c:	2b04      	cmp	r3, #4
 800379e:	bf08      	it	eq
 80037a0:	1aad      	subeq	r5, r5, r2
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	6922      	ldr	r2, [r4, #16]
 80037a6:	bf0c      	ite	eq
 80037a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037ac:	2500      	movne	r5, #0
 80037ae:	4293      	cmp	r3, r2
 80037b0:	bfc4      	itt	gt
 80037b2:	1a9b      	subgt	r3, r3, r2
 80037b4:	18ed      	addgt	r5, r5, r3
 80037b6:	2600      	movs	r6, #0
 80037b8:	341a      	adds	r4, #26
 80037ba:	42b5      	cmp	r5, r6
 80037bc:	d11a      	bne.n	80037f4 <_printf_common+0xc8>
 80037be:	2000      	movs	r0, #0
 80037c0:	e008      	b.n	80037d4 <_printf_common+0xa8>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4649      	mov	r1, r9
 80037c8:	4638      	mov	r0, r7
 80037ca:	47c0      	blx	r8
 80037cc:	3001      	adds	r0, #1
 80037ce:	d103      	bne.n	80037d8 <_printf_common+0xac>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d8:	3501      	adds	r5, #1
 80037da:	e7c6      	b.n	800376a <_printf_common+0x3e>
 80037dc:	18e1      	adds	r1, r4, r3
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	2030      	movs	r0, #48	; 0x30
 80037e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037e6:	4422      	add	r2, r4
 80037e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f0:	3302      	adds	r3, #2
 80037f2:	e7c7      	b.n	8003784 <_printf_common+0x58>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4622      	mov	r2, r4
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d0e6      	beq.n	80037d0 <_printf_common+0xa4>
 8003802:	3601      	adds	r6, #1
 8003804:	e7d9      	b.n	80037ba <_printf_common+0x8e>
	...

08003808 <_printf_i>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	7e0f      	ldrb	r7, [r1, #24]
 800380e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003810:	2f78      	cmp	r7, #120	; 0x78
 8003812:	4691      	mov	r9, r2
 8003814:	4680      	mov	r8, r0
 8003816:	460c      	mov	r4, r1
 8003818:	469a      	mov	sl, r3
 800381a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800381e:	d807      	bhi.n	8003830 <_printf_i+0x28>
 8003820:	2f62      	cmp	r7, #98	; 0x62
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x32>
 8003824:	2f00      	cmp	r7, #0
 8003826:	f000 80d8 	beq.w	80039da <_printf_i+0x1d2>
 800382a:	2f58      	cmp	r7, #88	; 0x58
 800382c:	f000 80a3 	beq.w	8003976 <_printf_i+0x16e>
 8003830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003838:	e03a      	b.n	80038b0 <_printf_i+0xa8>
 800383a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800383e:	2b15      	cmp	r3, #21
 8003840:	d8f6      	bhi.n	8003830 <_printf_i+0x28>
 8003842:	a101      	add	r1, pc, #4	; (adr r1, 8003848 <_printf_i+0x40>)
 8003844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038b5 	.word	0x080038b5
 8003850:	08003831 	.word	0x08003831
 8003854:	08003831 	.word	0x08003831
 8003858:	08003831 	.word	0x08003831
 800385c:	08003831 	.word	0x08003831
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003831 	.word	0x08003831
 8003868:	08003831 	.word	0x08003831
 800386c:	08003831 	.word	0x08003831
 8003870:	08003831 	.word	0x08003831
 8003874:	080039c1 	.word	0x080039c1
 8003878:	080038e5 	.word	0x080038e5
 800387c:	080039a3 	.word	0x080039a3
 8003880:	08003831 	.word	0x08003831
 8003884:	08003831 	.word	0x08003831
 8003888:	080039e3 	.word	0x080039e3
 800388c:	08003831 	.word	0x08003831
 8003890:	080038e5 	.word	0x080038e5
 8003894:	08003831 	.word	0x08003831
 8003898:	08003831 	.word	0x08003831
 800389c:	080039ab 	.word	0x080039ab
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	602a      	str	r2, [r5, #0]
 80038a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0a3      	b.n	80039fc <_printf_i+0x1f4>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	6829      	ldr	r1, [r5, #0]
 80038b8:	0606      	lsls	r6, r0, #24
 80038ba:	f101 0304 	add.w	r3, r1, #4
 80038be:	d50a      	bpl.n	80038d6 <_printf_i+0xce>
 80038c0:	680e      	ldr	r6, [r1, #0]
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	2e00      	cmp	r6, #0
 80038c6:	da03      	bge.n	80038d0 <_printf_i+0xc8>
 80038c8:	232d      	movs	r3, #45	; 0x2d
 80038ca:	4276      	negs	r6, r6
 80038cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d0:	485e      	ldr	r0, [pc, #376]	; (8003a4c <_printf_i+0x244>)
 80038d2:	230a      	movs	r3, #10
 80038d4:	e019      	b.n	800390a <_printf_i+0x102>
 80038d6:	680e      	ldr	r6, [r1, #0]
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038de:	bf18      	it	ne
 80038e0:	b236      	sxthne	r6, r6
 80038e2:	e7ef      	b.n	80038c4 <_printf_i+0xbc>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6820      	ldr	r0, [r4, #0]
 80038e8:	1d19      	adds	r1, r3, #4
 80038ea:	6029      	str	r1, [r5, #0]
 80038ec:	0601      	lsls	r1, r0, #24
 80038ee:	d501      	bpl.n	80038f4 <_printf_i+0xec>
 80038f0:	681e      	ldr	r6, [r3, #0]
 80038f2:	e002      	b.n	80038fa <_printf_i+0xf2>
 80038f4:	0646      	lsls	r6, r0, #25
 80038f6:	d5fb      	bpl.n	80038f0 <_printf_i+0xe8>
 80038f8:	881e      	ldrh	r6, [r3, #0]
 80038fa:	4854      	ldr	r0, [pc, #336]	; (8003a4c <_printf_i+0x244>)
 80038fc:	2f6f      	cmp	r7, #111	; 0x6f
 80038fe:	bf0c      	ite	eq
 8003900:	2308      	moveq	r3, #8
 8003902:	230a      	movne	r3, #10
 8003904:	2100      	movs	r1, #0
 8003906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800390a:	6865      	ldr	r5, [r4, #4]
 800390c:	60a5      	str	r5, [r4, #8]
 800390e:	2d00      	cmp	r5, #0
 8003910:	bfa2      	ittt	ge
 8003912:	6821      	ldrge	r1, [r4, #0]
 8003914:	f021 0104 	bicge.w	r1, r1, #4
 8003918:	6021      	strge	r1, [r4, #0]
 800391a:	b90e      	cbnz	r6, 8003920 <_printf_i+0x118>
 800391c:	2d00      	cmp	r5, #0
 800391e:	d04d      	beq.n	80039bc <_printf_i+0x1b4>
 8003920:	4615      	mov	r5, r2
 8003922:	fbb6 f1f3 	udiv	r1, r6, r3
 8003926:	fb03 6711 	mls	r7, r3, r1, r6
 800392a:	5dc7      	ldrb	r7, [r0, r7]
 800392c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003930:	4637      	mov	r7, r6
 8003932:	42bb      	cmp	r3, r7
 8003934:	460e      	mov	r6, r1
 8003936:	d9f4      	bls.n	8003922 <_printf_i+0x11a>
 8003938:	2b08      	cmp	r3, #8
 800393a:	d10b      	bne.n	8003954 <_printf_i+0x14c>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	07de      	lsls	r6, r3, #31
 8003940:	d508      	bpl.n	8003954 <_printf_i+0x14c>
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	6861      	ldr	r1, [r4, #4]
 8003946:	4299      	cmp	r1, r3
 8003948:	bfde      	ittt	le
 800394a:	2330      	movle	r3, #48	; 0x30
 800394c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003954:	1b52      	subs	r2, r2, r5
 8003956:	6122      	str	r2, [r4, #16]
 8003958:	f8cd a000 	str.w	sl, [sp]
 800395c:	464b      	mov	r3, r9
 800395e:	aa03      	add	r2, sp, #12
 8003960:	4621      	mov	r1, r4
 8003962:	4640      	mov	r0, r8
 8003964:	f7ff fee2 	bl	800372c <_printf_common>
 8003968:	3001      	adds	r0, #1
 800396a:	d14c      	bne.n	8003a06 <_printf_i+0x1fe>
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	b004      	add	sp, #16
 8003972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003976:	4835      	ldr	r0, [pc, #212]	; (8003a4c <_printf_i+0x244>)
 8003978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800397c:	6829      	ldr	r1, [r5, #0]
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f851 6b04 	ldr.w	r6, [r1], #4
 8003984:	6029      	str	r1, [r5, #0]
 8003986:	061d      	lsls	r5, r3, #24
 8003988:	d514      	bpl.n	80039b4 <_printf_i+0x1ac>
 800398a:	07df      	lsls	r7, r3, #31
 800398c:	bf44      	itt	mi
 800398e:	f043 0320 	orrmi.w	r3, r3, #32
 8003992:	6023      	strmi	r3, [r4, #0]
 8003994:	b91e      	cbnz	r6, 800399e <_printf_i+0x196>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	f023 0320 	bic.w	r3, r3, #32
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	2310      	movs	r3, #16
 80039a0:	e7b0      	b.n	8003904 <_printf_i+0xfc>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	f043 0320 	orr.w	r3, r3, #32
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	2378      	movs	r3, #120	; 0x78
 80039ac:	4828      	ldr	r0, [pc, #160]	; (8003a50 <_printf_i+0x248>)
 80039ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039b2:	e7e3      	b.n	800397c <_printf_i+0x174>
 80039b4:	0659      	lsls	r1, r3, #25
 80039b6:	bf48      	it	mi
 80039b8:	b2b6      	uxthmi	r6, r6
 80039ba:	e7e6      	b.n	800398a <_printf_i+0x182>
 80039bc:	4615      	mov	r5, r2
 80039be:	e7bb      	b.n	8003938 <_printf_i+0x130>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	6826      	ldr	r6, [r4, #0]
 80039c4:	6961      	ldr	r1, [r4, #20]
 80039c6:	1d18      	adds	r0, r3, #4
 80039c8:	6028      	str	r0, [r5, #0]
 80039ca:	0635      	lsls	r5, r6, #24
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	d501      	bpl.n	80039d4 <_printf_i+0x1cc>
 80039d0:	6019      	str	r1, [r3, #0]
 80039d2:	e002      	b.n	80039da <_printf_i+0x1d2>
 80039d4:	0670      	lsls	r0, r6, #25
 80039d6:	d5fb      	bpl.n	80039d0 <_printf_i+0x1c8>
 80039d8:	8019      	strh	r1, [r3, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	6123      	str	r3, [r4, #16]
 80039de:	4615      	mov	r5, r2
 80039e0:	e7ba      	b.n	8003958 <_printf_i+0x150>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	602a      	str	r2, [r5, #0]
 80039e8:	681d      	ldr	r5, [r3, #0]
 80039ea:	6862      	ldr	r2, [r4, #4]
 80039ec:	2100      	movs	r1, #0
 80039ee:	4628      	mov	r0, r5
 80039f0:	f7fc fc16 	bl	8000220 <memchr>
 80039f4:	b108      	cbz	r0, 80039fa <_printf_i+0x1f2>
 80039f6:	1b40      	subs	r0, r0, r5
 80039f8:	6060      	str	r0, [r4, #4]
 80039fa:	6863      	ldr	r3, [r4, #4]
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	2300      	movs	r3, #0
 8003a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a04:	e7a8      	b.n	8003958 <_printf_i+0x150>
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	462a      	mov	r2, r5
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	47d0      	blx	sl
 8003a10:	3001      	adds	r0, #1
 8003a12:	d0ab      	beq.n	800396c <_printf_i+0x164>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	079b      	lsls	r3, r3, #30
 8003a18:	d413      	bmi.n	8003a42 <_printf_i+0x23a>
 8003a1a:	68e0      	ldr	r0, [r4, #12]
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	4298      	cmp	r0, r3
 8003a20:	bfb8      	it	lt
 8003a22:	4618      	movlt	r0, r3
 8003a24:	e7a4      	b.n	8003970 <_printf_i+0x168>
 8003a26:	2301      	movs	r3, #1
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	47d0      	blx	sl
 8003a30:	3001      	adds	r0, #1
 8003a32:	d09b      	beq.n	800396c <_printf_i+0x164>
 8003a34:	3501      	adds	r5, #1
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	9903      	ldr	r1, [sp, #12]
 8003a3a:	1a5b      	subs	r3, r3, r1
 8003a3c:	42ab      	cmp	r3, r5
 8003a3e:	dcf2      	bgt.n	8003a26 <_printf_i+0x21e>
 8003a40:	e7eb      	b.n	8003a1a <_printf_i+0x212>
 8003a42:	2500      	movs	r5, #0
 8003a44:	f104 0619 	add.w	r6, r4, #25
 8003a48:	e7f5      	b.n	8003a36 <_printf_i+0x22e>
 8003a4a:	bf00      	nop
 8003a4c:	0800432f 	.word	0x0800432f
 8003a50:	08004340 	.word	0x08004340

08003a54 <_sbrk_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4d06      	ldr	r5, [pc, #24]	; (8003a70 <_sbrk_r+0x1c>)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	f7fd f9a0 	bl	8000da4 <_sbrk>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_sbrk_r+0x1a>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_sbrk_r+0x1a>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	200005f0 	.word	0x200005f0

08003a74 <__swbuf_r>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	460e      	mov	r6, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	b118      	cbz	r0, 8003a86 <__swbuf_r+0x12>
 8003a7e:	6983      	ldr	r3, [r0, #24]
 8003a80:	b90b      	cbnz	r3, 8003a86 <__swbuf_r+0x12>
 8003a82:	f000 f9d9 	bl	8003e38 <__sinit>
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <__swbuf_r+0x98>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d12b      	bne.n	8003ae4 <__swbuf_r+0x70>
 8003a8c:	686c      	ldr	r4, [r5, #4]
 8003a8e:	69a3      	ldr	r3, [r4, #24]
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	071a      	lsls	r2, r3, #28
 8003a96:	d52f      	bpl.n	8003af8 <__swbuf_r+0x84>
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	b36b      	cbz	r3, 8003af8 <__swbuf_r+0x84>
 8003a9c:	6923      	ldr	r3, [r4, #16]
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	1ac0      	subs	r0, r0, r3
 8003aa2:	6963      	ldr	r3, [r4, #20]
 8003aa4:	b2f6      	uxtb	r6, r6
 8003aa6:	4283      	cmp	r3, r0
 8003aa8:	4637      	mov	r7, r6
 8003aaa:	dc04      	bgt.n	8003ab6 <__swbuf_r+0x42>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f000 f92e 	bl	8003d10 <_fflush_r>
 8003ab4:	bb30      	cbnz	r0, 8003b04 <__swbuf_r+0x90>
 8003ab6:	68a3      	ldr	r3, [r4, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	6022      	str	r2, [r4, #0]
 8003ac2:	701e      	strb	r6, [r3, #0]
 8003ac4:	6963      	ldr	r3, [r4, #20]
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	d004      	beq.n	8003ad6 <__swbuf_r+0x62>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	07db      	lsls	r3, r3, #31
 8003ad0:	d506      	bpl.n	8003ae0 <__swbuf_r+0x6c>
 8003ad2:	2e0a      	cmp	r6, #10
 8003ad4:	d104      	bne.n	8003ae0 <__swbuf_r+0x6c>
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 f919 	bl	8003d10 <_fflush_r>
 8003ade:	b988      	cbnz	r0, 8003b04 <__swbuf_r+0x90>
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <__swbuf_r+0x9c>)
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	d101      	bne.n	8003aee <__swbuf_r+0x7a>
 8003aea:	68ac      	ldr	r4, [r5, #8]
 8003aec:	e7cf      	b.n	8003a8e <__swbuf_r+0x1a>
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <__swbuf_r+0xa0>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	bf08      	it	eq
 8003af4:	68ec      	ldreq	r4, [r5, #12]
 8003af6:	e7ca      	b.n	8003a8e <__swbuf_r+0x1a>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 f80c 	bl	8003b18 <__swsetup_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d0cb      	beq.n	8003a9c <__swbuf_r+0x28>
 8003b04:	f04f 37ff 	mov.w	r7, #4294967295
 8003b08:	e7ea      	b.n	8003ae0 <__swbuf_r+0x6c>
 8003b0a:	bf00      	nop
 8003b0c:	08004374 	.word	0x08004374
 8003b10:	08004394 	.word	0x08004394
 8003b14:	08004354 	.word	0x08004354

08003b18 <__swsetup_r>:
 8003b18:	4b32      	ldr	r3, [pc, #200]	; (8003be4 <__swsetup_r+0xcc>)
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	4606      	mov	r6, r0
 8003b20:	460c      	mov	r4, r1
 8003b22:	b125      	cbz	r5, 8003b2e <__swsetup_r+0x16>
 8003b24:	69ab      	ldr	r3, [r5, #24]
 8003b26:	b913      	cbnz	r3, 8003b2e <__swsetup_r+0x16>
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 f985 	bl	8003e38 <__sinit>
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <__swsetup_r+0xd0>)
 8003b30:	429c      	cmp	r4, r3
 8003b32:	d10f      	bne.n	8003b54 <__swsetup_r+0x3c>
 8003b34:	686c      	ldr	r4, [r5, #4]
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b3c:	0719      	lsls	r1, r3, #28
 8003b3e:	d42c      	bmi.n	8003b9a <__swsetup_r+0x82>
 8003b40:	06dd      	lsls	r5, r3, #27
 8003b42:	d411      	bmi.n	8003b68 <__swsetup_r+0x50>
 8003b44:	2309      	movs	r3, #9
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b52:	e03e      	b.n	8003bd2 <__swsetup_r+0xba>
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <__swsetup_r+0xd4>)
 8003b56:	429c      	cmp	r4, r3
 8003b58:	d101      	bne.n	8003b5e <__swsetup_r+0x46>
 8003b5a:	68ac      	ldr	r4, [r5, #8]
 8003b5c:	e7eb      	b.n	8003b36 <__swsetup_r+0x1e>
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <__swsetup_r+0xd8>)
 8003b60:	429c      	cmp	r4, r3
 8003b62:	bf08      	it	eq
 8003b64:	68ec      	ldreq	r4, [r5, #12]
 8003b66:	e7e6      	b.n	8003b36 <__swsetup_r+0x1e>
 8003b68:	0758      	lsls	r0, r3, #29
 8003b6a:	d512      	bpl.n	8003b92 <__swsetup_r+0x7a>
 8003b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6e:	b141      	cbz	r1, 8003b82 <__swsetup_r+0x6a>
 8003b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d002      	beq.n	8003b7e <__swsetup_r+0x66>
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f7ff fb9d 	bl	80032b8 <_free_r>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6363      	str	r3, [r4, #52]	; 0x34
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	b94b      	cbnz	r3, 8003bb2 <__swsetup_r+0x9a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba8:	d003      	beq.n	8003bb2 <__swsetup_r+0x9a>
 8003baa:	4621      	mov	r1, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 fa09 	bl	8003fc4 <__smakebuf_r>
 8003bb2:	89a0      	ldrh	r0, [r4, #12]
 8003bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bb8:	f010 0301 	ands.w	r3, r0, #1
 8003bbc:	d00a      	beq.n	8003bd4 <__swsetup_r+0xbc>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	6963      	ldr	r3, [r4, #20]
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	61a3      	str	r3, [r4, #24]
 8003bc8:	6923      	ldr	r3, [r4, #16]
 8003bca:	b943      	cbnz	r3, 8003bde <__swsetup_r+0xc6>
 8003bcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bd0:	d1ba      	bne.n	8003b48 <__swsetup_r+0x30>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	0781      	lsls	r1, r0, #30
 8003bd6:	bf58      	it	pl
 8003bd8:	6963      	ldrpl	r3, [r4, #20]
 8003bda:	60a3      	str	r3, [r4, #8]
 8003bdc:	e7f4      	b.n	8003bc8 <__swsetup_r+0xb0>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e7f7      	b.n	8003bd2 <__swsetup_r+0xba>
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c
 8003be8:	08004374 	.word	0x08004374
 8003bec:	08004394 	.word	0x08004394
 8003bf0:	08004354 	.word	0x08004354

08003bf4 <abort>:
 8003bf4:	b508      	push	{r3, lr}
 8003bf6:	2006      	movs	r0, #6
 8003bf8:	f000 fa58 	bl	80040ac <raise>
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f7fd f859 	bl	8000cb4 <_exit>
	...

08003c04 <__sflush_r>:
 8003c04:	898a      	ldrh	r2, [r1, #12]
 8003c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	0710      	lsls	r0, r2, #28
 8003c0e:	460c      	mov	r4, r1
 8003c10:	d458      	bmi.n	8003cc4 <__sflush_r+0xc0>
 8003c12:	684b      	ldr	r3, [r1, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dc05      	bgt.n	8003c24 <__sflush_r+0x20>
 8003c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dc02      	bgt.n	8003c24 <__sflush_r+0x20>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	d0f9      	beq.n	8003c1e <__sflush_r+0x1a>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c30:	682f      	ldr	r7, [r5, #0]
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	d032      	beq.n	8003c9c <__sflush_r+0x98>
 8003c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	075a      	lsls	r2, r3, #29
 8003c3c:	d505      	bpl.n	8003c4a <__sflush_r+0x46>
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	1ac0      	subs	r0, r0, r3
 8003c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c44:	b10b      	cbz	r3, 8003c4a <__sflush_r+0x46>
 8003c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c48:	1ac0      	subs	r0, r0, r3
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c50:	6a21      	ldr	r1, [r4, #32]
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b0      	blx	r6
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	d106      	bne.n	8003c6a <__sflush_r+0x66>
 8003c5c:	6829      	ldr	r1, [r5, #0]
 8003c5e:	291d      	cmp	r1, #29
 8003c60:	d82c      	bhi.n	8003cbc <__sflush_r+0xb8>
 8003c62:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <__sflush_r+0x108>)
 8003c64:	40ca      	lsrs	r2, r1
 8003c66:	07d6      	lsls	r6, r2, #31
 8003c68:	d528      	bpl.n	8003cbc <__sflush_r+0xb8>
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	6062      	str	r2, [r4, #4]
 8003c6e:	04d9      	lsls	r1, r3, #19
 8003c70:	6922      	ldr	r2, [r4, #16]
 8003c72:	6022      	str	r2, [r4, #0]
 8003c74:	d504      	bpl.n	8003c80 <__sflush_r+0x7c>
 8003c76:	1c42      	adds	r2, r0, #1
 8003c78:	d101      	bne.n	8003c7e <__sflush_r+0x7a>
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	b903      	cbnz	r3, 8003c80 <__sflush_r+0x7c>
 8003c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8003c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c82:	602f      	str	r7, [r5, #0]
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d0ca      	beq.n	8003c1e <__sflush_r+0x1a>
 8003c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c8c:	4299      	cmp	r1, r3
 8003c8e:	d002      	beq.n	8003c96 <__sflush_r+0x92>
 8003c90:	4628      	mov	r0, r5
 8003c92:	f7ff fb11 	bl	80032b8 <_free_r>
 8003c96:	2000      	movs	r0, #0
 8003c98:	6360      	str	r0, [r4, #52]	; 0x34
 8003c9a:	e7c1      	b.n	8003c20 <__sflush_r+0x1c>
 8003c9c:	6a21      	ldr	r1, [r4, #32]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	1c41      	adds	r1, r0, #1
 8003ca6:	d1c7      	bne.n	8003c38 <__sflush_r+0x34>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0c4      	beq.n	8003c38 <__sflush_r+0x34>
 8003cae:	2b1d      	cmp	r3, #29
 8003cb0:	d001      	beq.n	8003cb6 <__sflush_r+0xb2>
 8003cb2:	2b16      	cmp	r3, #22
 8003cb4:	d101      	bne.n	8003cba <__sflush_r+0xb6>
 8003cb6:	602f      	str	r7, [r5, #0]
 8003cb8:	e7b1      	b.n	8003c1e <__sflush_r+0x1a>
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	e7ad      	b.n	8003c20 <__sflush_r+0x1c>
 8003cc4:	690f      	ldr	r7, [r1, #16]
 8003cc6:	2f00      	cmp	r7, #0
 8003cc8:	d0a9      	beq.n	8003c1e <__sflush_r+0x1a>
 8003cca:	0793      	lsls	r3, r2, #30
 8003ccc:	680e      	ldr	r6, [r1, #0]
 8003cce:	bf08      	it	eq
 8003cd0:	694b      	ldreq	r3, [r1, #20]
 8003cd2:	600f      	str	r7, [r1, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	eba6 0807 	sub.w	r8, r6, r7
 8003cdc:	608b      	str	r3, [r1, #8]
 8003cde:	f1b8 0f00 	cmp.w	r8, #0
 8003ce2:	dd9c      	ble.n	8003c1e <__sflush_r+0x1a>
 8003ce4:	6a21      	ldr	r1, [r4, #32]
 8003ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ce8:	4643      	mov	r3, r8
 8003cea:	463a      	mov	r2, r7
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b0      	blx	r6
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	dc06      	bgt.n	8003d02 <__sflush_r+0xfe>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	e78e      	b.n	8003c20 <__sflush_r+0x1c>
 8003d02:	4407      	add	r7, r0
 8003d04:	eba8 0800 	sub.w	r8, r8, r0
 8003d08:	e7e9      	b.n	8003cde <__sflush_r+0xda>
 8003d0a:	bf00      	nop
 8003d0c:	20400001 	.word	0x20400001

08003d10 <_fflush_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	4605      	mov	r5, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	b913      	cbnz	r3, 8003d20 <_fflush_r+0x10>
 8003d1a:	2500      	movs	r5, #0
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	b118      	cbz	r0, 8003d2a <_fflush_r+0x1a>
 8003d22:	6983      	ldr	r3, [r0, #24]
 8003d24:	b90b      	cbnz	r3, 8003d2a <_fflush_r+0x1a>
 8003d26:	f000 f887 	bl	8003e38 <__sinit>
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <_fflush_r+0x6c>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d11b      	bne.n	8003d68 <_fflush_r+0x58>
 8003d30:	686c      	ldr	r4, [r5, #4]
 8003d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ef      	beq.n	8003d1a <_fflush_r+0xa>
 8003d3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d3c:	07d0      	lsls	r0, r2, #31
 8003d3e:	d404      	bmi.n	8003d4a <_fflush_r+0x3a>
 8003d40:	0599      	lsls	r1, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_fflush_r+0x3a>
 8003d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d46:	f000 f915 	bl	8003f74 <__retarget_lock_acquire_recursive>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	f7ff ff59 	bl	8003c04 <__sflush_r>
 8003d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d54:	07da      	lsls	r2, r3, #31
 8003d56:	4605      	mov	r5, r0
 8003d58:	d4e0      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d5a:	89a3      	ldrh	r3, [r4, #12]
 8003d5c:	059b      	lsls	r3, r3, #22
 8003d5e:	d4dd      	bmi.n	8003d1c <_fflush_r+0xc>
 8003d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d62:	f000 f908 	bl	8003f76 <__retarget_lock_release_recursive>
 8003d66:	e7d9      	b.n	8003d1c <_fflush_r+0xc>
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <_fflush_r+0x70>)
 8003d6a:	429c      	cmp	r4, r3
 8003d6c:	d101      	bne.n	8003d72 <_fflush_r+0x62>
 8003d6e:	68ac      	ldr	r4, [r5, #8]
 8003d70:	e7df      	b.n	8003d32 <_fflush_r+0x22>
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <_fflush_r+0x74>)
 8003d74:	429c      	cmp	r4, r3
 8003d76:	bf08      	it	eq
 8003d78:	68ec      	ldreq	r4, [r5, #12]
 8003d7a:	e7da      	b.n	8003d32 <_fflush_r+0x22>
 8003d7c:	08004374 	.word	0x08004374
 8003d80:	08004394 	.word	0x08004394
 8003d84:	08004354 	.word	0x08004354

08003d88 <std>:
 8003d88:	2300      	movs	r3, #0
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d96:	6083      	str	r3, [r0, #8]
 8003d98:	8181      	strh	r1, [r0, #12]
 8003d9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d9c:	81c2      	strh	r2, [r0, #14]
 8003d9e:	6183      	str	r3, [r0, #24]
 8003da0:	4619      	mov	r1, r3
 8003da2:	2208      	movs	r2, #8
 8003da4:	305c      	adds	r0, #92	; 0x5c
 8003da6:	f7ff fa09 	bl	80031bc <memset>
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <std+0x38>)
 8003dac:	6263      	str	r3, [r4, #36]	; 0x24
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <std+0x3c>)
 8003db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <std+0x40>)
 8003db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <std+0x44>)
 8003db8:	6224      	str	r4, [r4, #32]
 8003dba:	6323      	str	r3, [r4, #48]	; 0x30
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	bf00      	nop
 8003dc0:	080040e5 	.word	0x080040e5
 8003dc4:	08004107 	.word	0x08004107
 8003dc8:	0800413f 	.word	0x0800413f
 8003dcc:	08004163 	.word	0x08004163

08003dd0 <_cleanup_r>:
 8003dd0:	4901      	ldr	r1, [pc, #4]	; (8003dd8 <_cleanup_r+0x8>)
 8003dd2:	f000 b8af 	b.w	8003f34 <_fwalk_reent>
 8003dd6:	bf00      	nop
 8003dd8:	08003d11 	.word	0x08003d11

08003ddc <__sfmoreglue>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	2268      	movs	r2, #104	; 0x68
 8003de0:	1e4d      	subs	r5, r1, #1
 8003de2:	4355      	muls	r5, r2
 8003de4:	460e      	mov	r6, r1
 8003de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003dea:	f7ff fad1 	bl	8003390 <_malloc_r>
 8003dee:	4604      	mov	r4, r0
 8003df0:	b140      	cbz	r0, 8003e04 <__sfmoreglue+0x28>
 8003df2:	2100      	movs	r1, #0
 8003df4:	e9c0 1600 	strd	r1, r6, [r0]
 8003df8:	300c      	adds	r0, #12
 8003dfa:	60a0      	str	r0, [r4, #8]
 8003dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e00:	f7ff f9dc 	bl	80031bc <memset>
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd70      	pop	{r4, r5, r6, pc}

08003e08 <__sfp_lock_acquire>:
 8003e08:	4801      	ldr	r0, [pc, #4]	; (8003e10 <__sfp_lock_acquire+0x8>)
 8003e0a:	f000 b8b3 	b.w	8003f74 <__retarget_lock_acquire_recursive>
 8003e0e:	bf00      	nop
 8003e10:	200005ed 	.word	0x200005ed

08003e14 <__sfp_lock_release>:
 8003e14:	4801      	ldr	r0, [pc, #4]	; (8003e1c <__sfp_lock_release+0x8>)
 8003e16:	f000 b8ae 	b.w	8003f76 <__retarget_lock_release_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	200005ed 	.word	0x200005ed

08003e20 <__sinit_lock_acquire>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__sinit_lock_acquire+0x8>)
 8003e22:	f000 b8a7 	b.w	8003f74 <__retarget_lock_acquire_recursive>
 8003e26:	bf00      	nop
 8003e28:	200005ee 	.word	0x200005ee

08003e2c <__sinit_lock_release>:
 8003e2c:	4801      	ldr	r0, [pc, #4]	; (8003e34 <__sinit_lock_release+0x8>)
 8003e2e:	f000 b8a2 	b.w	8003f76 <__retarget_lock_release_recursive>
 8003e32:	bf00      	nop
 8003e34:	200005ee 	.word	0x200005ee

08003e38 <__sinit>:
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	f7ff fff0 	bl	8003e20 <__sinit_lock_acquire>
 8003e40:	69a3      	ldr	r3, [r4, #24]
 8003e42:	b11b      	cbz	r3, 8003e4c <__sinit+0x14>
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	f7ff bff0 	b.w	8003e2c <__sinit_lock_release>
 8003e4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e50:	6523      	str	r3, [r4, #80]	; 0x50
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <__sinit+0x68>)
 8003e54:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <__sinit+0x6c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	bf04      	itt	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	61a3      	streq	r3, [r4, #24]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f820 	bl	8003ea8 <__sfp>
 8003e68:	6060      	str	r0, [r4, #4]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f81c 	bl	8003ea8 <__sfp>
 8003e70:	60a0      	str	r0, [r4, #8]
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 f818 	bl	8003ea8 <__sfp>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	60e0      	str	r0, [r4, #12]
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	6860      	ldr	r0, [r4, #4]
 8003e80:	f7ff ff82 	bl	8003d88 <std>
 8003e84:	68a0      	ldr	r0, [r4, #8]
 8003e86:	2201      	movs	r2, #1
 8003e88:	2109      	movs	r1, #9
 8003e8a:	f7ff ff7d 	bl	8003d88 <std>
 8003e8e:	68e0      	ldr	r0, [r4, #12]
 8003e90:	2202      	movs	r2, #2
 8003e92:	2112      	movs	r1, #18
 8003e94:	f7ff ff78 	bl	8003d88 <std>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	61a3      	str	r3, [r4, #24]
 8003e9c:	e7d2      	b.n	8003e44 <__sinit+0xc>
 8003e9e:	bf00      	nop
 8003ea0:	0800426c 	.word	0x0800426c
 8003ea4:	08003dd1 	.word	0x08003dd1

08003ea8 <__sfp>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	4607      	mov	r7, r0
 8003eac:	f7ff ffac 	bl	8003e08 <__sfp_lock_acquire>
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <__sfp+0x84>)
 8003eb2:	681e      	ldr	r6, [r3, #0]
 8003eb4:	69b3      	ldr	r3, [r6, #24]
 8003eb6:	b913      	cbnz	r3, 8003ebe <__sfp+0x16>
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f7ff ffbd 	bl	8003e38 <__sinit>
 8003ebe:	3648      	adds	r6, #72	; 0x48
 8003ec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	d503      	bpl.n	8003ed0 <__sfp+0x28>
 8003ec8:	6833      	ldr	r3, [r6, #0]
 8003eca:	b30b      	cbz	r3, 8003f10 <__sfp+0x68>
 8003ecc:	6836      	ldr	r6, [r6, #0]
 8003ece:	e7f7      	b.n	8003ec0 <__sfp+0x18>
 8003ed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ed4:	b9d5      	cbnz	r5, 8003f0c <__sfp+0x64>
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <__sfp+0x88>)
 8003ed8:	60e3      	str	r3, [r4, #12]
 8003eda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ede:	6665      	str	r5, [r4, #100]	; 0x64
 8003ee0:	f000 f847 	bl	8003f72 <__retarget_lock_init_recursive>
 8003ee4:	f7ff ff96 	bl	8003e14 <__sfp_lock_release>
 8003ee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003eec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ef0:	6025      	str	r5, [r4, #0]
 8003ef2:	61a5      	str	r5, [r4, #24]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003efc:	f7ff f95e 	bl	80031bc <memset>
 8003f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f08:	4620      	mov	r0, r4
 8003f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0c:	3468      	adds	r4, #104	; 0x68
 8003f0e:	e7d9      	b.n	8003ec4 <__sfp+0x1c>
 8003f10:	2104      	movs	r1, #4
 8003f12:	4638      	mov	r0, r7
 8003f14:	f7ff ff62 	bl	8003ddc <__sfmoreglue>
 8003f18:	4604      	mov	r4, r0
 8003f1a:	6030      	str	r0, [r6, #0]
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d1d5      	bne.n	8003ecc <__sfp+0x24>
 8003f20:	f7ff ff78 	bl	8003e14 <__sfp_lock_release>
 8003f24:	230c      	movs	r3, #12
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	e7ee      	b.n	8003f08 <__sfp+0x60>
 8003f2a:	bf00      	nop
 8003f2c:	0800426c 	.word	0x0800426c
 8003f30:	ffff0001 	.word	0xffff0001

08003f34 <_fwalk_reent>:
 8003f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f38:	4606      	mov	r6, r0
 8003f3a:	4688      	mov	r8, r1
 8003f3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f40:	2700      	movs	r7, #0
 8003f42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f46:	f1b9 0901 	subs.w	r9, r9, #1
 8003f4a:	d505      	bpl.n	8003f58 <_fwalk_reent+0x24>
 8003f4c:	6824      	ldr	r4, [r4, #0]
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d1f7      	bne.n	8003f42 <_fwalk_reent+0xe>
 8003f52:	4638      	mov	r0, r7
 8003f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f58:	89ab      	ldrh	r3, [r5, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d907      	bls.n	8003f6e <_fwalk_reent+0x3a>
 8003f5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f62:	3301      	adds	r3, #1
 8003f64:	d003      	beq.n	8003f6e <_fwalk_reent+0x3a>
 8003f66:	4629      	mov	r1, r5
 8003f68:	4630      	mov	r0, r6
 8003f6a:	47c0      	blx	r8
 8003f6c:	4307      	orrs	r7, r0
 8003f6e:	3568      	adds	r5, #104	; 0x68
 8003f70:	e7e9      	b.n	8003f46 <_fwalk_reent+0x12>

08003f72 <__retarget_lock_init_recursive>:
 8003f72:	4770      	bx	lr

08003f74 <__retarget_lock_acquire_recursive>:
 8003f74:	4770      	bx	lr

08003f76 <__retarget_lock_release_recursive>:
 8003f76:	4770      	bx	lr

08003f78 <__swhatbuf_r>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	460e      	mov	r6, r1
 8003f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f80:	2900      	cmp	r1, #0
 8003f82:	b096      	sub	sp, #88	; 0x58
 8003f84:	4614      	mov	r4, r2
 8003f86:	461d      	mov	r5, r3
 8003f88:	da08      	bge.n	8003f9c <__swhatbuf_r+0x24>
 8003f8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	061a      	lsls	r2, r3, #24
 8003f94:	d410      	bmi.n	8003fb8 <__swhatbuf_r+0x40>
 8003f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9a:	e00e      	b.n	8003fba <__swhatbuf_r+0x42>
 8003f9c:	466a      	mov	r2, sp
 8003f9e:	f000 f907 	bl	80041b0 <_fstat_r>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	dbf1      	blt.n	8003f8a <__swhatbuf_r+0x12>
 8003fa6:	9a01      	ldr	r2, [sp, #4]
 8003fa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fb0:	425a      	negs	r2, r3
 8003fb2:	415a      	adcs	r2, r3
 8003fb4:	602a      	str	r2, [r5, #0]
 8003fb6:	e7ee      	b.n	8003f96 <__swhatbuf_r+0x1e>
 8003fb8:	2340      	movs	r3, #64	; 0x40
 8003fba:	2000      	movs	r0, #0
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	b016      	add	sp, #88	; 0x58
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fc4 <__smakebuf_r>:
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fc8:	079d      	lsls	r5, r3, #30
 8003fca:	4606      	mov	r6, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	d507      	bpl.n	8003fe0 <__smakebuf_r+0x1c>
 8003fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	6123      	str	r3, [r4, #16]
 8003fd8:	2301      	movs	r3, #1
 8003fda:	6163      	str	r3, [r4, #20]
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	ab01      	add	r3, sp, #4
 8003fe2:	466a      	mov	r2, sp
 8003fe4:	f7ff ffc8 	bl	8003f78 <__swhatbuf_r>
 8003fe8:	9900      	ldr	r1, [sp, #0]
 8003fea:	4605      	mov	r5, r0
 8003fec:	4630      	mov	r0, r6
 8003fee:	f7ff f9cf 	bl	8003390 <_malloc_r>
 8003ff2:	b948      	cbnz	r0, 8004008 <__smakebuf_r+0x44>
 8003ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff8:	059a      	lsls	r2, r3, #22
 8003ffa:	d4ef      	bmi.n	8003fdc <__smakebuf_r+0x18>
 8003ffc:	f023 0303 	bic.w	r3, r3, #3
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	e7e3      	b.n	8003fd0 <__smakebuf_r+0xc>
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <__smakebuf_r+0x7c>)
 800400a:	62b3      	str	r3, [r6, #40]	; 0x28
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	6020      	str	r0, [r4, #0]
 8004010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	9b00      	ldr	r3, [sp, #0]
 8004018:	6163      	str	r3, [r4, #20]
 800401a:	9b01      	ldr	r3, [sp, #4]
 800401c:	6120      	str	r0, [r4, #16]
 800401e:	b15b      	cbz	r3, 8004038 <__smakebuf_r+0x74>
 8004020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004024:	4630      	mov	r0, r6
 8004026:	f000 f8d5 	bl	80041d4 <_isatty_r>
 800402a:	b128      	cbz	r0, 8004038 <__smakebuf_r+0x74>
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	81a3      	strh	r3, [r4, #12]
 8004038:	89a0      	ldrh	r0, [r4, #12]
 800403a:	4305      	orrs	r5, r0
 800403c:	81a5      	strh	r5, [r4, #12]
 800403e:	e7cd      	b.n	8003fdc <__smakebuf_r+0x18>
 8004040:	08003dd1 	.word	0x08003dd1

08004044 <__malloc_lock>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__malloc_lock+0x8>)
 8004046:	f7ff bf95 	b.w	8003f74 <__retarget_lock_acquire_recursive>
 800404a:	bf00      	nop
 800404c:	200005ec 	.word	0x200005ec

08004050 <__malloc_unlock>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__malloc_unlock+0x8>)
 8004052:	f7ff bf90 	b.w	8003f76 <__retarget_lock_release_recursive>
 8004056:	bf00      	nop
 8004058:	200005ec 	.word	0x200005ec

0800405c <_raise_r>:
 800405c:	291f      	cmp	r1, #31
 800405e:	b538      	push	{r3, r4, r5, lr}
 8004060:	4604      	mov	r4, r0
 8004062:	460d      	mov	r5, r1
 8004064:	d904      	bls.n	8004070 <_raise_r+0x14>
 8004066:	2316      	movs	r3, #22
 8004068:	6003      	str	r3, [r0, #0]
 800406a:	f04f 30ff 	mov.w	r0, #4294967295
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004072:	b112      	cbz	r2, 800407a <_raise_r+0x1e>
 8004074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004078:	b94b      	cbnz	r3, 800408e <_raise_r+0x32>
 800407a:	4620      	mov	r0, r4
 800407c:	f000 f830 	bl	80040e0 <_getpid_r>
 8004080:	462a      	mov	r2, r5
 8004082:	4601      	mov	r1, r0
 8004084:	4620      	mov	r0, r4
 8004086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408a:	f000 b817 	b.w	80040bc <_kill_r>
 800408e:	2b01      	cmp	r3, #1
 8004090:	d00a      	beq.n	80040a8 <_raise_r+0x4c>
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	d103      	bne.n	800409e <_raise_r+0x42>
 8004096:	2316      	movs	r3, #22
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	2001      	movs	r0, #1
 800409c:	e7e7      	b.n	800406e <_raise_r+0x12>
 800409e:	2400      	movs	r4, #0
 80040a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80040a4:	4628      	mov	r0, r5
 80040a6:	4798      	blx	r3
 80040a8:	2000      	movs	r0, #0
 80040aa:	e7e0      	b.n	800406e <_raise_r+0x12>

080040ac <raise>:
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <raise+0xc>)
 80040ae:	4601      	mov	r1, r0
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f7ff bfd3 	b.w	800405c <_raise_r>
 80040b6:	bf00      	nop
 80040b8:	2000000c 	.word	0x2000000c

080040bc <_kill_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d07      	ldr	r5, [pc, #28]	; (80040dc <_kill_r+0x20>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	f7fc fde3 	bl	8000c94 <_kill>
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d102      	bne.n	80040d8 <_kill_r+0x1c>
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	b103      	cbz	r3, 80040d8 <_kill_r+0x1c>
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
 80040da:	bf00      	nop
 80040dc:	200005f0 	.word	0x200005f0

080040e0 <_getpid_r>:
 80040e0:	f7fc bdd0 	b.w	8000c84 <_getpid>

080040e4 <__sread>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	460c      	mov	r4, r1
 80040e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ec:	f000 f894 	bl	8004218 <_read_r>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	bfab      	itete	ge
 80040f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040f6:	89a3      	ldrhlt	r3, [r4, #12]
 80040f8:	181b      	addge	r3, r3, r0
 80040fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040fe:	bfac      	ite	ge
 8004100:	6563      	strge	r3, [r4, #84]	; 0x54
 8004102:	81a3      	strhlt	r3, [r4, #12]
 8004104:	bd10      	pop	{r4, pc}

08004106 <__swrite>:
 8004106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410a:	461f      	mov	r7, r3
 800410c:	898b      	ldrh	r3, [r1, #12]
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	4605      	mov	r5, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4616      	mov	r6, r2
 8004116:	d505      	bpl.n	8004124 <__swrite+0x1e>
 8004118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411c:	2302      	movs	r3, #2
 800411e:	2200      	movs	r2, #0
 8004120:	f000 f868 	bl	80041f4 <_lseek_r>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	4632      	mov	r2, r6
 8004132:	463b      	mov	r3, r7
 8004134:	4628      	mov	r0, r5
 8004136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800413a:	f000 b817 	b.w	800416c <_write_r>

0800413e <__sseek>:
 800413e:	b510      	push	{r4, lr}
 8004140:	460c      	mov	r4, r1
 8004142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004146:	f000 f855 	bl	80041f4 <_lseek_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	bf15      	itete	ne
 8004150:	6560      	strne	r0, [r4, #84]	; 0x54
 8004152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800415a:	81a3      	strheq	r3, [r4, #12]
 800415c:	bf18      	it	ne
 800415e:	81a3      	strhne	r3, [r4, #12]
 8004160:	bd10      	pop	{r4, pc}

08004162 <__sclose>:
 8004162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004166:	f000 b813 	b.w	8004190 <_close_r>
	...

0800416c <_write_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	; (800418c <_write_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fdc1 	bl	8000d02 <_write>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_write_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_write_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	200005f0 	.word	0x200005f0

08004190 <_close_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d06      	ldr	r5, [pc, #24]	; (80041ac <_close_r+0x1c>)
 8004194:	2300      	movs	r3, #0
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	f7fc fdcd 	bl	8000d3a <_close>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_close_r+0x1a>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_close_r+0x1a>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	200005f0 	.word	0x200005f0

080041b0 <_fstat_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4d07      	ldr	r5, [pc, #28]	; (80041d0 <_fstat_r+0x20>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	602b      	str	r3, [r5, #0]
 80041be:	f7fc fdc8 	bl	8000d52 <_fstat>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d102      	bne.n	80041cc <_fstat_r+0x1c>
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	b103      	cbz	r3, 80041cc <_fstat_r+0x1c>
 80041ca:	6023      	str	r3, [r4, #0]
 80041cc:	bd38      	pop	{r3, r4, r5, pc}
 80041ce:	bf00      	nop
 80041d0:	200005f0 	.word	0x200005f0

080041d4 <_isatty_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4d06      	ldr	r5, [pc, #24]	; (80041f0 <_isatty_r+0x1c>)
 80041d8:	2300      	movs	r3, #0
 80041da:	4604      	mov	r4, r0
 80041dc:	4608      	mov	r0, r1
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fc fdc7 	bl	8000d72 <_isatty>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_isatty_r+0x1a>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_isatty_r+0x1a>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	200005f0 	.word	0x200005f0

080041f4 <_lseek_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4d07      	ldr	r5, [pc, #28]	; (8004214 <_lseek_r+0x20>)
 80041f8:	4604      	mov	r4, r0
 80041fa:	4608      	mov	r0, r1
 80041fc:	4611      	mov	r1, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	602a      	str	r2, [r5, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f7fc fdc0 	bl	8000d88 <_lseek>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_lseek_r+0x1e>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_lseek_r+0x1e>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200005f0 	.word	0x200005f0

08004218 <_read_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d07      	ldr	r5, [pc, #28]	; (8004238 <_read_r+0x20>)
 800421c:	4604      	mov	r4, r0
 800421e:	4608      	mov	r0, r1
 8004220:	4611      	mov	r1, r2
 8004222:	2200      	movs	r2, #0
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f7fc fd4e 	bl	8000cc8 <_read>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_read_r+0x1e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_read_r+0x1e>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	200005f0 	.word	0x200005f0

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
