
Proyecto_asm_ejercicio_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f08  08002f08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f10  08002f10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000000c  08002f24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08002f24  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c2f0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000cb36  00000000  00000000  0002c32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1c  00000000  00000000  00038e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0003ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c6b0b  00000000  00000000  0003b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000928  00000000  00000000  00102080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020814  00000000  00000000  001029a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001231bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  0012320c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002ecc 	.word	0x08002ecc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002ecc 	.word	0x08002ecc

08000218 <asm_producto_escalar12>:
    	// cbz r0, exit_producto_escalar16
    	// cbz r1, exit_producto_escalar16
    	// cbz r2, exit_producto_escalar16
    	// cbz r3, exit_producto_escalar16

    	push {r4, r5} @ mando al stack r4 (variable auxiliar) y r5 (variable auxiliar saturada)
 8000218:	b430      	push	{r4, r5}

0800021a <loop_producto_escalar12>:

    	loop_producto_escalar12:
    		subs r2, #1 @ Decremento en uno el "contador" (longitud) y afecto flag Zero
 800021a:	3a01      	subs	r2, #1

    		ldrh r4, [r0, r2, LSL #1] @ Guardo en r4 (auxiliar) *(r0 + (r2<<2)) = r4
 800021c:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    								  @ usamos ldrh porque trabajamos con 16 bits (half word)
    								  @ LSL #1 desplazamiento de 2 bytes

    		@mul Rd, Rn, Rm -> Rd = Rn*Rm
    		mul r4, r4, r3 @ r4 = r4*r3 (r3 escalar o factor)
 8000220:	fb04 f403 	mul.w	r4, r4, r3
    		usat r5, #12, r4 @ satura a 12 bits el valor de r4 (16 bits) y lo guarda en r5
 8000224:	f384 050c 	usat	r5, #12, r4
    		strh r5, [r1, r2, LSL #1] @ r5 --> *(r1 + (r2<<2)) (equivalente a decir que escribo
 8000228:	f821 5012 	strh.w	r5, [r1, r2, lsl #1]
    								 @ el producto por un escalar, saturado a 12 bits, contenido
    								 @ en r5 en el elemento correspondiente en el vector de
    								 @ salida) desplazamiento LSL #1 es de a dos bytes porque
    								 @estamos con 16 bits por eso usamos strh

    		bne loop_producto_escalar12 @ cuando "subs" hace llegar a 0 en valor de r2 se activa
 800022c:	d1f5      	bne.n	800021a <loop_producto_escalar12>
    									@ el flag Zero y "bne" sale del loop


		pop {r4, r5} @ recupero del stack el valor de r4 y r5
 800022e:	bc30      	pop	{r4, r5}

08000230 <exit_producto_escalar12>:

    	exit_producto_escalar12:
	        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 8000230:	4770      	bx	lr
	...

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	4604      	mov	r4, r0
 800026c:	468e      	mov	lr, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14d      	bne.n	800030e <__udivmoddi4+0xaa>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d969      	bls.n	800034c <__udivmoddi4+0xe8>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b152      	cbz	r2, 8000294 <__udivmoddi4+0x30>
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	f1c2 0120 	rsb	r1, r2, #32
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	fa0c fc02 	lsl.w	ip, ip, r2
 800028e:	ea41 0e03 	orr.w	lr, r1, r3
 8000292:	4094      	lsls	r4, r2
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	0c21      	lsrs	r1, r4, #16
 800029a:	fbbe f6f8 	udiv	r6, lr, r8
 800029e:	fa1f f78c 	uxth.w	r7, ip
 80002a2:	fb08 e316 	mls	r3, r8, r6, lr
 80002a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002aa:	fb06 f107 	mul.w	r1, r6, r7
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 811f 	bcs.w	80004fc <__udivmoddi4+0x298>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 811c 	bls.w	80004fc <__udivmoddi4+0x298>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x92>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 810a 	bcs.w	8000500 <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8107 	bls.w	8000500 <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	1be4      	subs	r4, r4, r7
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa4>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xc2>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80ef 	beq.w	80004f6 <__udivmoddi4+0x292>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x160>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd4>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80f9 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	469e      	mov	lr, r3
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa4>
 8000346:	e9c5 4e00 	strd	r4, lr, [r5]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa4>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xec>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 8092 	bne.w	800047e <__udivmoddi4+0x21a>
 800035a:	eba1 010c 	sub.w	r1, r1, ip
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f fe8c 	uxth.w	lr, ip
 8000366:	2601      	movs	r6, #1
 8000368:	0c20      	lsrs	r0, r4, #16
 800036a:	fbb1 f3f7 	udiv	r3, r1, r7
 800036e:	fb07 1113 	mls	r1, r7, r3, r1
 8000372:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000376:	fb0e f003 	mul.w	r0, lr, r3
 800037a:	4288      	cmp	r0, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x12c>
 800037e:	eb1c 0101 	adds.w	r1, ip, r1
 8000382:	f103 38ff 	add.w	r8, r3, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x12a>
 8000388:	4288      	cmp	r0, r1
 800038a:	f200 80cb 	bhi.w	8000524 <__udivmoddi4+0x2c0>
 800038e:	4643      	mov	r3, r8
 8000390:	1a09      	subs	r1, r1, r0
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb1 f0f7 	udiv	r0, r1, r7
 8000398:	fb07 1110 	mls	r1, r7, r0, r1
 800039c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a0:	fb0e fe00 	mul.w	lr, lr, r0
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x156>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x154>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80bb 	bhi.w	800052e <__udivmoddi4+0x2ca>
 80003b8:	4608      	mov	r0, r1
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	e79c      	b.n	80002fe <__udivmoddi4+0x9a>
 80003c4:	f1c6 0720 	rsb	r7, r6, #32
 80003c8:	40b3      	lsls	r3, r6
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f407 	lsr.w	r4, r0, r7
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	431c      	orrs	r4, r3
 80003dc:	40f9      	lsrs	r1, r7
 80003de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e2:	fa00 f306 	lsl.w	r3, r0, r6
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	0c20      	lsrs	r0, r4, #16
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fb09 1118 	mls	r1, r9, r8, r1
 80003f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f8:	fb08 f00e 	mul.w	r0, r8, lr
 80003fc:	4288      	cmp	r0, r1
 80003fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b8>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2bc>
 8000410:	4288      	cmp	r0, r1
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2bc>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4461      	add	r1, ip
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f9 	udiv	r0, r1, r9
 8000424:	fb09 1110 	mls	r1, r9, r0, r1
 8000428:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000430:	458e      	cmp	lr, r1
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1e2>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f100 34ff 	add.w	r4, r0, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2b4>
 800043e:	458e      	cmp	lr, r1
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2b4>
 8000442:	3802      	subs	r0, #2
 8000444:	4461      	add	r1, ip
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	fba0 9402 	umull	r9, r4, r0, r2
 800044e:	eba1 010e 	sub.w	r1, r1, lr
 8000452:	42a1      	cmp	r1, r4
 8000454:	46c8      	mov	r8, r9
 8000456:	46a6      	mov	lr, r4
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x2a4>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x2a0>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x212>
 800045e:	ebb3 0208 	subs.w	r2, r3, r8
 8000462:	eb61 010e 	sbc.w	r1, r1, lr
 8000466:	fa01 f707 	lsl.w	r7, r1, r7
 800046a:	fa22 f306 	lsr.w	r3, r2, r6
 800046e:	40f1      	lsrs	r1, r6
 8000470:	431f      	orrs	r7, r3
 8000472:	e9c5 7100 	strd	r7, r1, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1c2 0320 	rsb	r3, r2, #32
 8000482:	40d8      	lsrs	r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa21 f303 	lsr.w	r3, r1, r3
 800048c:	4091      	lsls	r1, r2
 800048e:	4301      	orrs	r1, r0
 8000490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fbb3 f0f7 	udiv	r0, r3, r7
 800049c:	fb07 3610 	mls	r6, r7, r0, r3
 80004a0:	0c0b      	lsrs	r3, r1, #16
 80004a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a6:	fb00 f60e 	mul.w	r6, r0, lr
 80004aa:	429e      	cmp	r6, r3
 80004ac:	fa04 f402 	lsl.w	r4, r4, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x260>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b8>
 80004bc:	429e      	cmp	r6, r3
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b8>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1b9b      	subs	r3, r3, r6
 80004c6:	b289      	uxth	r1, r1
 80004c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004cc:	fb07 3316 	mls	r3, r7, r6, r3
 80004d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d4:	fb06 f30e 	mul.w	r3, r6, lr
 80004d8:	428b      	cmp	r3, r1
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x28a>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004ea:	3e02      	subs	r6, #2
 80004ec:	4461      	add	r1, ip
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0x104>
 80004f6:	462e      	mov	r6, r5
 80004f8:	4628      	mov	r0, r5
 80004fa:	e705      	b.n	8000308 <__udivmoddi4+0xa4>
 80004fc:	4606      	mov	r6, r0
 80004fe:	e6e3      	b.n	80002c8 <__udivmoddi4+0x64>
 8000500:	4618      	mov	r0, r3
 8000502:	e6f8      	b.n	80002f6 <__udivmoddi4+0x92>
 8000504:	454b      	cmp	r3, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f8>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000510:	3801      	subs	r0, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f8>
 8000514:	4646      	mov	r6, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x28a>
 8000518:	4620      	mov	r0, r4
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1e2>
 800051c:	4640      	mov	r0, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x260>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b8>
 8000524:	3b02      	subs	r3, #2
 8000526:	4461      	add	r1, ip
 8000528:	e732      	b.n	8000390 <__udivmoddi4+0x12c>
 800052a:	4630      	mov	r0, r6
 800052c:	e709      	b.n	8000342 <__udivmoddi4+0xde>
 800052e:	4464      	add	r4, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e742      	b.n	80003ba <__udivmoddi4+0x156>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb29 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f83b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8ff 	bl	8000748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800054a:	f000 f8a3 	bl	8000694 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800054e:	f000 f8cb 	bl	80006e8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Línea para activar el conteo de ciclos (se debe ejecutar una sola vez)
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <main+0x7c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <main+0x7c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]


  uint16_t vec_in[5] = {1, 2, 3, 4, 5};
 800055e:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <main+0x80>)
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	ca07      	ldmia	r2, {r0, r1, r2}
 8000566:	c303      	stmia	r3!, {r0, r1}
 8000568:	801a      	strh	r2, [r3, #0]
  uint16_t vec_out[5];
  uint32_t lon = sizeof(vec_in)/sizeof(vec_in[0]); //Este cociente me dala longitud del vector
 800056a:	2305      	movs	r3, #5
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  	  	  	  	  	  	  	  	  	  	  	 //divide el tamaño en bytes de todo el vector
  	  	  	  	  	  	  	  	  	  	  	 //y divide en el tamaño de un elemento del vector
  	  	  	  	  	  	  	  	  	  	  	 //eso me da la cantidad de elementos del vector
  uint16_t factor = 2; //Valor de la variable "escalar"
 800056e:	2302      	movs	r3, #2
 8000570:	847b      	strh	r3, [r7, #34]	; 0x22

  // Ejecutar por cada función:
  DWT->CYCCNT = 0;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <main+0x7c>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
  productoEscalar16(vec_in, vec_out, lon, factor);
 8000578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800057a:	f107 0108 	add.w	r1, r7, #8
 800057e:	f107 0014 	add.w	r0, r7, #20
 8000582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000584:	f000 f98e 	bl	80008a4 <productoEscalar16>
  // Obtiene cantidad de ciclos que demoró la función en C
  const volatile uint32_t CiclosC = DWT->CYCCNT;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x7c>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	607b      	str	r3, [r7, #4]


  uint16_t factor1 = 2000;
 800058e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000592:	843b      	strh	r3, [r7, #32]
  // Ejecutar por cada función:
  DWT->CYCCNT = 0;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <main+0x7c>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  asm_producto_escalar12(vec_in, vec_out, lon, factor1);
 800059a:	8c3b      	ldrh	r3, [r7, #32]
 800059c:	f107 0108 	add.w	r1, r7, #8
 80005a0:	f107 0014 	add.w	r0, r7, #20
 80005a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005a6:	f7ff fe37 	bl	8000218 <asm_producto_escalar12>
  // Obtiene cantidad de ciclos que demoró la función en Assembly
  const volatile uint32_t CiclosASM = DWT->CYCCNT;
 80005aa:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <main+0x7c>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x78>
 80005b2:	bf00      	nop
 80005b4:	e0001000 	.word	0xe0001000
 80005b8:	08002ee4 	.word	0x08002ee4

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fc76 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <SystemClock_Config+0xd0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xd4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xd4>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000630:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800063a:	2308      	movs	r3, #8
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fbc2 	bl	8001dd0 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f94d 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2103      	movs	r1, #3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff00 	bl	8001478 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067e:	f000 f937 	bl	80008f0 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART3_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART3_UART_Init+0x4c>)
 80006cc:	f001 fe04 	bl	80022d8 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f90b 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028
 80006e4:	40004800 	.word	0x40004800

080006e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006f6:	2206      	movs	r2, #6
 80006f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000708:	2202      	movs	r2, #2
 800070a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000720:	2201      	movs	r2, #1
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000726:	2201      	movs	r2, #1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000732:	f000 fd58 	bl	80011e6 <HAL_PCD_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f8d8 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000006c 	.word	0x2000006c

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a4b      	ldr	r2, [pc, #300]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b49      	ldr	r3, [pc, #292]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a44      	ldr	r2, [pc, #272]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a36      	ldr	r2, [pc, #216]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a28      	ldr	r2, [pc, #160]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f244 0181 	movw	r1, #16513	; 0x4081
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_GPIO_Init+0x150>)
 800080e:	f000 fcd1 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <MX_GPIO_Init+0x154>)
 8000818:	f000 fccc 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481b      	ldr	r0, [pc, #108]	; (80008a0 <MX_GPIO_Init+0x158>)
 8000834:	f000 fb2a 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_GPIO_Init+0x150>)
 8000852:	f000 fb1b 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000856:	2340      	movs	r3, #64	; 0x40
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_GPIO_Init+0x154>)
 800086e:	f000 fb0d 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_GPIO_Init+0x154>)
 8000886:	f000 fb01 	bl	8000e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	; 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40020800 	.word	0x40020800

080008a4 <productoEscalar16>:

/* USER CODE BEGIN 4 */

static void productoEscalar16 (uint16_t * vectorIn, uint16_t * vectorOut,
		uint32_t longitud, uint16_t escalar)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b087      	sub	sp, #28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	807b      	strh	r3, [r7, #2]
	for(uint32_t i = 0; i < longitud; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e010      	b.n	80008da <productoEscalar16+0x36>
	{
		vectorOut[i] = vectorIn[i]*escalar;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	68b9      	ldr	r1, [r7, #8]
 80008c8:	440b      	add	r3, r1
 80008ca:	8879      	ldrh	r1, [r7, #2]
 80008cc:	fb11 f202 	smulbb	r2, r1, r2
 80008d0:	b292      	uxth	r2, r2
 80008d2:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < longitud; i++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d3ea      	bcc.n	80008b8 <productoEscalar16+0x14>
	}

}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	371c      	adds	r7, #28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b8:	2307      	movs	r3, #7
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c4:	f000 fa62 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00

080009dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a0      	sub	sp, #128	; 0x80
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2258      	movs	r2, #88	; 0x58
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fa5d 	bl	8002ebc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a0a:	d14d      	bne.n	8000aa8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a10:	2300      	movs	r3, #0
 8000a12:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 ff4d 	bl	80018b8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff64 	bl	80008f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a56:	230a      	movs	r3, #10
 8000a58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <HAL_PCD_MspInit+0xd8>)
 8000a62:	f000 fa13 	bl	8000e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <HAL_PCD_MspInit+0xd8>)
 8000a7c:	f000 fa06 	bl	8000e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8a:	6353      	str	r3, [r2, #52]	; 0x34
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <HAL_PCD_MspInit+0xd4>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3780      	adds	r7, #128	; 0x80
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f383 8814 	msr	CONTROL, r3
}
 8000ae6:	bf00      	nop
	__set_CONTROL(0b00);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f890 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 f981 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fce1 	bl	8000538 <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	08002f18 	.word	0x08002f18
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	2000057c 	.word	0x2000057c

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f931 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe98 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f93b 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f911 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000578 	.word	0x20000578

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000578 	.word	0x20000578

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e165      	b.n	8001174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8154 	bne.w	800116e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80ae 	beq.w	800116e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_GPIO_Init+0x300>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a5c      	ldr	r2, [pc, #368]	; (800118c <HAL_GPIO_Init+0x300>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <HAL_GPIO_Init+0x300>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x304>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x308>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x21a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x30c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x216>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x310>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x212>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x314>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x20e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_GPIO_Init+0x318>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x20a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4a      	ldr	r2, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x31c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x206>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a49      	ldr	r2, [pc, #292]	; (80011ac <HAL_GPIO_Init+0x320>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x202>
 800108a:	2306      	movs	r3, #6
 800108c:	e00c      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800108e:	2307      	movs	r3, #7
 8001090:	e00a      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 8001092:	2305      	movs	r3, #5
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 8001096:	2304      	movs	r3, #4
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x21c>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_GPIO_Init+0x304>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a31      	ldr	r2, [pc, #196]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x324>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f ae96 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e8:	b08f      	sub	sp, #60	; 0x3c
 80011ea:	af0a      	add	r7, sp, #40	; 0x28
 80011ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e116      	b.n	8001426 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d106      	bne.n	8001218 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fbe2 	bl	80009dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fb81 	bl	800293e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	687e      	ldr	r6, [r7, #4]
 8001244:	466d      	mov	r5, sp
 8001246:	f106 0410 	add.w	r4, r6, #16
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001256:	e885 0003 	stmia.w	r5, {r0, r1}
 800125a:	1d33      	adds	r3, r6, #4
 800125c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f001 fb0c 	bl	800287c <USB_CoreInit>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0d7      	b.n	8001426 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fb6f 	bl	8002960 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e04a      	b.n	800131e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	333d      	adds	r3, #61	; 0x3d
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	333c      	adds	r3, #60	; 0x3c
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	b298      	uxth	r0, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3344      	adds	r3, #68	; 0x44
 80012c4:	4602      	mov	r2, r0
 80012c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3340      	adds	r3, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3348      	adds	r3, #72	; 0x48
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	334c      	adds	r3, #76	; 0x4c
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3354      	adds	r3, #84	; 0x54
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3af      	bcc.n	8001288 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e044      	b.n	80013b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3301      	adds	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3b5      	bcc.n	800132e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	687e      	ldr	r6, [r7, #4]
 80013ca:	466d      	mov	r5, sp
 80013cc:	f106 0410 	add.w	r4, r6, #16
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80013e0:	1d33      	adds	r3, r6, #4
 80013e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f001 fb07 	bl	80029f8 <USB_DevInit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e014      	b.n	8001426 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	2b01      	cmp	r3, #1
 8001412:	d102      	bne.n	800141a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f80a 	bl	800142e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fcc5 	bl	8002dae <USB_DevDisconnect>

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800142e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800142e:	b480      	push	{r7}
 8001430:	b085      	sub	sp, #20
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	f043 0303 	orr.w	r3, r3, #3
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90c      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d044      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d119      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e067      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fb7a 	bl	8000c60 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fb76 	bl	8000c60 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f821 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fada 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00
 8001634:	40023800 	.word	0x40023800
 8001638:	08002ef0 	.word	0x08002ef0
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b094      	sub	sp, #80	; 0x50
 800164a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
 8001650:	2300      	movs	r3, #0
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001654:	2300      	movs	r3, #0
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d00d      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x40>
 8001668:	2b08      	cmp	r3, #8
 800166a:	f200 80e1 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x34>
 8001672:	2b04      	cmp	r3, #4
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x3a>
 8001676:	e0db      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b73      	ldr	r3, [pc, #460]	; (8001848 <HAL_RCC_GetSysClockFreq+0x204>)
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800167c:	e0db      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_GetSysClockFreq+0x208>)
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001682:	e0d8      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800168c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	2200      	movs	r2, #0
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80016a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016b6:	4622      	mov	r2, r4
 80016b8:	462b      	mov	r3, r5
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0159      	lsls	r1, r3, #5
 80016c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c8:	0150      	lsls	r0, r2, #5
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4621      	mov	r1, r4
 80016d0:	1a51      	subs	r1, r2, r1
 80016d2:	6139      	str	r1, [r7, #16]
 80016d4:	4629      	mov	r1, r5
 80016d6:	eb63 0301 	sbc.w	r3, r3, r1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016e8:	4659      	mov	r1, fp
 80016ea:	018b      	lsls	r3, r1, #6
 80016ec:	4651      	mov	r1, sl
 80016ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f2:	4651      	mov	r1, sl
 80016f4:	018a      	lsls	r2, r1, #6
 80016f6:	4651      	mov	r1, sl
 80016f8:	ebb2 0801 	subs.w	r8, r2, r1
 80016fc:	4659      	mov	r1, fp
 80016fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001716:	4690      	mov	r8, r2
 8001718:	4699      	mov	r9, r3
 800171a:	4623      	mov	r3, r4
 800171c:	eb18 0303 	adds.w	r3, r8, r3
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	462b      	mov	r3, r5
 8001724:	eb49 0303 	adc.w	r3, r9, r3
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001736:	4629      	mov	r1, r5
 8001738:	024b      	lsls	r3, r1, #9
 800173a:	4621      	mov	r1, r4
 800173c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001740:	4621      	mov	r1, r4
 8001742:	024a      	lsls	r2, r1, #9
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174a:	2200      	movs	r2, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
 800174e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001754:	f7fe fd6e 	bl	8000234 <__aeabi_uldivmod>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4613      	mov	r3, r2
 800175e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001760:	e058      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	099b      	lsrs	r3, r3, #6
 8001768:	2200      	movs	r2, #0
 800176a:	4618      	mov	r0, r3
 800176c:	4611      	mov	r1, r2
 800176e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800177c:	4642      	mov	r2, r8
 800177e:	464b      	mov	r3, r9
 8001780:	f04f 0000 	mov.w	r0, #0
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	0159      	lsls	r1, r3, #5
 800178a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178e:	0150      	lsls	r0, r2, #5
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4641      	mov	r1, r8
 8001796:	ebb2 0a01 	subs.w	sl, r2, r1
 800179a:	4649      	mov	r1, r9
 800179c:	eb63 0b01 	sbc.w	fp, r3, r1
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017b4:	ebb2 040a 	subs.w	r4, r2, sl
 80017b8:	eb63 050b 	sbc.w	r5, r3, fp
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4643      	mov	r3, r8
 80017d2:	18e3      	adds	r3, r4, r3
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	464b      	mov	r3, r9
 80017d8:	eb45 0303 	adc.w	r3, r5, r3
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fe:	2200      	movs	r2, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	61fa      	str	r2, [r7, #28]
 8001804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001808:	f7fe fd14 	bl	8000234 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_GetSysClockFreq+0x200>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetSysClockFreq+0x204>)
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001838:	4618      	mov	r0, r3
 800183a:	3750      	adds	r7, #80	; 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	007a1200 	.word	0x007a1200

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_GetHCLKFreq+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800186c:	f7ff fff0 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <HAL_RCC_GetPCLK1Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	08002f00 	.word	0x08002f00

08001890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001894:	f7ff ffdc 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0b5b      	lsrs	r3, r3, #13
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08002f00 	.word	0x08002f00

080018b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4977      	ldr	r1, [pc, #476]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001910:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	496b      	ldr	r1, [pc, #428]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800191a:	4313      	orrs	r3, r2
 800191c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001928:	2301      	movs	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d022      	beq.n	800197e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800193a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800193e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	4960      	ldr	r1, [pc, #384]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001948:	4313      	orrs	r3, r2
 800194a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001956:	2301      	movs	r3, #1
 8001958:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001962:	d10c      	bne.n	800197e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001964:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800196a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	3b01      	subs	r3, #1
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	4954      	ldr	r1, [pc, #336]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001978:	4313      	orrs	r3, r2
 800197a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d022      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800198a:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800198c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001990:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	494b      	ldr	r1, [pc, #300]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800199a:	4313      	orrs	r3, r2
 800199c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	493f      	ldr	r1, [pc, #252]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 808a 	beq.w	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a33      	ldr	r2, [pc, #204]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a06:	f7ff f92b 	bl	8000c60 <HAL_GetTick>
 8001a0a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff f927 	bl	8000c60 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1d1      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a34:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d02f      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d028      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a52:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d114      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8f5 	bl	8000c60 <HAL_GetTick>
 8001a76:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f8f1 	bl	8000c60 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e199      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aa8:	d114      	bne.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001abe:	4902      	ldr	r1, [pc, #8]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
 8001ac4:	e00c      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	42470e40 	.word	0x42470e40
 8001ad4:	4b89      	ldr	r3, [pc, #548]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a88      	ldr	r2, [pc, #544]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ada:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ade:	6093      	str	r3, [r2, #8]
 8001ae0:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	4983      	ldr	r1, [pc, #524]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001b04:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001b06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b14:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	4976      	ldr	r1, [pc, #472]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d011      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b36:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	496d      	ldr	r1, [pc, #436]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b54:	d101      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b66:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	4961      	ldr	r1, [pc, #388]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d004      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	f040 80c6 	bne.w	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b92:	f7ff f865 	bl	8000c60 <HAL_GetTick>
 8001b96:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b9a:	f7ff f861 	bl	8000c60 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e10b      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001bb8:	4a53      	ldr	r2, [pc, #332]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bbe:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d023      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bfc:	d00e      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d019      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c1a:	d110      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	071b      	lsls	r3, r3, #28
 8001c36:	4931      	ldr	r1, [pc, #196]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d026      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d122      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c6c:	0e1b      	lsrs	r3, r3, #24
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	019b      	lsls	r3, r3, #6
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	071b      	lsls	r3, r3, #28
 8001c8c:	491b      	ldr	r1, [pc, #108]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9a:	f023 021f 	bic.w	r2, r3, #31
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	4915      	ldr	r1, [pc, #84]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d010      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	071b      	lsls	r3, r3, #28
 8001cd2:	490a      	ldr	r1, [pc, #40]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7fe ffbe 	bl	8000c60 <HAL_GetTick>
 8001ce4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ce6:	e011      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ce8:	f7fe ffba 	bl	8000c60 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d90a      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e064      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	424711e0 	.word	0x424711e0
 8001d04:	42470068 	.word	0x42470068
 8001d08:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0e7      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	4926      	ldr	r1, [pc, #152]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	491d      	ldr	r1, [pc, #116]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	4915      	ldr	r1, [pc, #84]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e273      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d075      	beq.n	8001eda <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d00c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d112      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e06:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e12:	d10b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d05b      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x108>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d157      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e24e      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d106      	bne.n	8001e44 <HAL_RCC_OscConfig+0x74>
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a75      	ldr	r2, [pc, #468]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e01d      	b.n	8001e80 <HAL_RCC_OscConfig+0xb0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6f      	ldr	r2, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6c      	ldr	r2, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0xb0>
 8001e68:	4b69      	ldr	r3, [pc, #420]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a68      	ldr	r2, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a65      	ldr	r2, [pc, #404]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d013      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe feea 	bl	8000c60 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7fe fee6 	bl	8000c60 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e213      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0xc0>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fed6 	bl	8000c60 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe fed2 	bl	8000c60 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1ff      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	4b51      	ldr	r3, [pc, #324]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xe8>
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d11c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <HAL_RCC_OscConfig+0x152>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1d3      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4937      	ldr	r1, [pc, #220]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	e03a      	b.n	8001fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x244>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fe8b 	bl	8000c60 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7fe fe87 	bl	8000c60 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1b4      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4925      	ldr	r1, [pc, #148]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x244>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe fe6a 	bl	8000c60 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7fe fe66 	bl	8000c60 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e193      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d036      	beq.n	8002028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_RCC_OscConfig+0x248>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc8:	f7fe fe4a 	bl	8000c60 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7fe fe46 	bl	8000c60 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e173      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x200>
 8001fee:	e01b      	b.n	8002028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_OscConfig+0x248>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fe33 	bl	8000c60 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	e00e      	b.n	800201c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7fe fe2f 	bl	8000c60 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d907      	bls.n	800201c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e15c      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
 8002010:	40023800 	.word	0x40023800
 8002014:	42470000 	.word	0x42470000
 8002018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b8a      	ldr	r3, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800201e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ea      	bne.n	8001ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8097 	beq.w	8002164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b83      	ldr	r3, [pc, #524]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b7f      	ldr	r3, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a7e      	ldr	r2, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002066:	4b79      	ldr	r3, [pc, #484]	; (800224c <HAL_RCC_OscConfig+0x47c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x47c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x47c>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe fdef 	bl	8000c60 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fdeb 	bl	8000c60 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e118      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x47c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x2ea>
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x324>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x30c>
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a60      	ldr	r2, [pc, #384]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	4a5d      	ldr	r2, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	; 0x70
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x324>
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	4b57      	ldr	r3, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4a56      	ldr	r2, [pc, #344]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fdb0 	bl	8000c60 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fdac 	bl	8000c60 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0d7      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <HAL_RCC_OscConfig+0x334>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fd9a 	bl	8000c60 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fd96 	bl	8000c60 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0c1      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ee      	bne.n	8002130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80ad 	beq.w	80022c8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d060      	beq.n	800223c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d145      	bne.n	800220e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_RCC_OscConfig+0x480>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fd6a 	bl	8000c60 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fd66 	bl	8000c60 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e093      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	019b      	lsls	r3, r3, #6
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	071b      	lsls	r3, r3, #28
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x480>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe fd3b 	bl	8000c60 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe fd37 	bl	8000c60 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e064      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x41e>
 800220c:	e05c      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x480>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fd24 	bl	8000c60 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fd20 	bl	8000c60 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e04d      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x478>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x44c>
 800223a:	e045      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e040      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000
 8002250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_RCC_OscConfig+0x504>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d030      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d129      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d122      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800228a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d119      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e03f      	b.n	800236a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fb24 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f829 	bl	8002374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002378:	b0c0      	sub	sp, #256	; 0x100
 800237a:	af00      	add	r7, sp, #0
 800237c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	68d9      	ldr	r1, [r3, #12]
 8002392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	ea40 0301 	orr.w	r3, r0, r1
 800239c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023cc:	f021 010c 	bic.w	r1, r1, #12
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023da:	430b      	orrs	r3, r1
 80023dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	6999      	ldr	r1, [r3, #24]
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	ea40 0301 	orr.w	r3, r0, r1
 80023fa:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b95      	ldr	r3, [pc, #596]	; (8002658 <UART_SetConfig+0x2e4>)
 8002404:	429a      	cmp	r2, r3
 8002406:	d011      	beq.n	800242c <UART_SetConfig+0xb8>
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b93      	ldr	r3, [pc, #588]	; (800265c <UART_SetConfig+0x2e8>)
 8002410:	429a      	cmp	r2, r3
 8002412:	d00b      	beq.n	800242c <UART_SetConfig+0xb8>
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b91      	ldr	r3, [pc, #580]	; (8002660 <UART_SetConfig+0x2ec>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d005      	beq.n	800242c <UART_SetConfig+0xb8>
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <UART_SetConfig+0x2f0>)
 8002428:	429a      	cmp	r2, r3
 800242a:	d104      	bne.n	8002436 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800242c:	f7ff fa30 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 8002430:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002434:	e003      	b.n	800243e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002436:	f7ff fa17 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800243a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002448:	f040 8110 	bne.w	800266c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800244c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002456:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800245a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800245e:	4622      	mov	r2, r4
 8002460:	462b      	mov	r3, r5
 8002462:	1891      	adds	r1, r2, r2
 8002464:	65b9      	str	r1, [r7, #88]	; 0x58
 8002466:	415b      	adcs	r3, r3
 8002468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800246a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800246e:	4621      	mov	r1, r4
 8002470:	eb12 0801 	adds.w	r8, r2, r1
 8002474:	4629      	mov	r1, r5
 8002476:	eb43 0901 	adc.w	r9, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb18 0303 	adds.w	r3, r8, r3
 8002498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800249c:	462b      	mov	r3, r5
 800249e:	eb49 0303 	adc.w	r3, r9, r3
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024ba:	460b      	mov	r3, r1
 80024bc:	18db      	adds	r3, r3, r3
 80024be:	653b      	str	r3, [r7, #80]	; 0x50
 80024c0:	4613      	mov	r3, r2
 80024c2:	eb42 0303 	adc.w	r3, r2, r3
 80024c6:	657b      	str	r3, [r7, #84]	; 0x54
 80024c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024d0:	f7fd feb0 	bl	8000234 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <UART_SetConfig+0x2f4>)
 80024da:	fba3 2302 	umull	r2, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	011c      	lsls	r4, r3, #4
 80024e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	1891      	adds	r1, r2, r2
 80024fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80024fc:	415b      	adcs	r3, r3
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002504:	4641      	mov	r1, r8
 8002506:	eb12 0a01 	adds.w	sl, r2, r1
 800250a:	4649      	mov	r1, r9
 800250c:	eb43 0b01 	adc.w	fp, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800251c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002524:	4692      	mov	sl, r2
 8002526:	469b      	mov	fp, r3
 8002528:	4643      	mov	r3, r8
 800252a:	eb1a 0303 	adds.w	r3, sl, r3
 800252e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002532:	464b      	mov	r3, r9
 8002534:	eb4b 0303 	adc.w	r3, fp, r3
 8002538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002548:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800254c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002550:	460b      	mov	r3, r1
 8002552:	18db      	adds	r3, r3, r3
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
 8002556:	4613      	mov	r3, r2
 8002558:	eb42 0303 	adc.w	r3, r2, r3
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
 800255e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002562:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002566:	f7fd fe65 	bl	8000234 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4611      	mov	r1, r2
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <UART_SetConfig+0x2f4>)
 8002572:	fba3 2301 	umull	r2, r3, r3, r1
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2264      	movs	r2, #100	; 0x64
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	1acb      	subs	r3, r1, r3
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <UART_SetConfig+0x2f4>)
 8002588:	fba3 2302 	umull	r2, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002594:	441c      	add	r4, r3
 8002596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025a8:	4642      	mov	r2, r8
 80025aa:	464b      	mov	r3, r9
 80025ac:	1891      	adds	r1, r2, r2
 80025ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80025b0:	415b      	adcs	r3, r3
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025b8:	4641      	mov	r1, r8
 80025ba:	1851      	adds	r1, r2, r1
 80025bc:	6339      	str	r1, [r7, #48]	; 0x30
 80025be:	4649      	mov	r1, r9
 80025c0:	414b      	adcs	r3, r1
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025d0:	4659      	mov	r1, fp
 80025d2:	00cb      	lsls	r3, r1, #3
 80025d4:	4651      	mov	r1, sl
 80025d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025da:	4651      	mov	r1, sl
 80025dc:	00ca      	lsls	r2, r1, #3
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	4642      	mov	r2, r8
 80025e6:	189b      	adds	r3, r3, r2
 80025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025ec:	464b      	mov	r3, r9
 80025ee:	460a      	mov	r2, r1
 80025f0:	eb42 0303 	adc.w	r3, r2, r3
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002604:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002608:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800260c:	460b      	mov	r3, r1
 800260e:	18db      	adds	r3, r3, r3
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
 8002612:	4613      	mov	r3, r2
 8002614:	eb42 0303 	adc.w	r3, r2, r3
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800261e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002622:	f7fd fe07 	bl	8000234 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <UART_SetConfig+0x2f4>)
 800262c:	fba3 1302 	umull	r1, r3, r3, r2
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	2164      	movs	r1, #100	; 0x64
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	3332      	adds	r3, #50	; 0x32
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <UART_SetConfig+0x2f4>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	f003 0207 	and.w	r2, r3, #7
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4422      	add	r2, r4
 8002652:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002654:	e109      	b.n	800286a <UART_SetConfig+0x4f6>
 8002656:	bf00      	nop
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	40011800 	.word	0x40011800
 8002664:	40011c00 	.word	0x40011c00
 8002668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002676:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800267a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800267e:	4642      	mov	r2, r8
 8002680:	464b      	mov	r3, r9
 8002682:	1891      	adds	r1, r2, r2
 8002684:	6239      	str	r1, [r7, #32]
 8002686:	415b      	adcs	r3, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800268e:	4641      	mov	r1, r8
 8002690:	1854      	adds	r4, r2, r1
 8002692:	4649      	mov	r1, r9
 8002694:	eb43 0501 	adc.w	r5, r3, r1
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	00eb      	lsls	r3, r5, #3
 80026a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a6:	00e2      	lsls	r2, r4, #3
 80026a8:	4614      	mov	r4, r2
 80026aa:	461d      	mov	r5, r3
 80026ac:	4643      	mov	r3, r8
 80026ae:	18e3      	adds	r3, r4, r3
 80026b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026b4:	464b      	mov	r3, r9
 80026b6:	eb45 0303 	adc.w	r3, r5, r3
 80026ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026da:	4629      	mov	r1, r5
 80026dc:	008b      	lsls	r3, r1, #2
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e4:	4621      	mov	r1, r4
 80026e6:	008a      	lsls	r2, r1, #2
 80026e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026ec:	f7fd fda2 	bl	8000234 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <UART_SetConfig+0x504>)
 80026f6:	fba3 2302 	umull	r2, r3, r3, r2
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	011c      	lsls	r4, r3, #4
 80026fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002702:	2200      	movs	r2, #0
 8002704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002708:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800270c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	1891      	adds	r1, r2, r2
 8002716:	61b9      	str	r1, [r7, #24]
 8002718:	415b      	adcs	r3, r3
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	4641      	mov	r1, r8
 8002722:	1851      	adds	r1, r2, r1
 8002724:	6139      	str	r1, [r7, #16]
 8002726:	4649      	mov	r1, r9
 8002728:	414b      	adcs	r3, r1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002738:	4659      	mov	r1, fp
 800273a:	00cb      	lsls	r3, r1, #3
 800273c:	4651      	mov	r1, sl
 800273e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002742:	4651      	mov	r1, sl
 8002744:	00ca      	lsls	r2, r1, #3
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	4603      	mov	r3, r0
 800274c:	4642      	mov	r2, r8
 800274e:	189b      	adds	r3, r3, r2
 8002750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002754:	464b      	mov	r3, r9
 8002756:	460a      	mov	r2, r1
 8002758:	eb42 0303 	adc.w	r3, r2, r3
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	67bb      	str	r3, [r7, #120]	; 0x78
 800276a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002778:	4649      	mov	r1, r9
 800277a:	008b      	lsls	r3, r1, #2
 800277c:	4641      	mov	r1, r8
 800277e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002782:	4641      	mov	r1, r8
 8002784:	008a      	lsls	r2, r1, #2
 8002786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800278a:	f7fd fd53 	bl	8000234 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <UART_SetConfig+0x504>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a34      	ldr	r2, [pc, #208]	; (8002878 <UART_SetConfig+0x504>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b2:	441c      	add	r4, r3
 80027b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b8:	2200      	movs	r2, #0
 80027ba:	673b      	str	r3, [r7, #112]	; 0x70
 80027bc:	677a      	str	r2, [r7, #116]	; 0x74
 80027be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027c2:	4642      	mov	r2, r8
 80027c4:	464b      	mov	r3, r9
 80027c6:	1891      	adds	r1, r2, r2
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	415b      	adcs	r3, r3
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027d2:	4641      	mov	r1, r8
 80027d4:	1851      	adds	r1, r2, r1
 80027d6:	6039      	str	r1, [r7, #0]
 80027d8:	4649      	mov	r1, r9
 80027da:	414b      	adcs	r3, r1
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027ea:	4659      	mov	r1, fp
 80027ec:	00cb      	lsls	r3, r1, #3
 80027ee:	4651      	mov	r1, sl
 80027f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f4:	4651      	mov	r1, sl
 80027f6:	00ca      	lsls	r2, r1, #3
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	4642      	mov	r2, r8
 8002800:	189b      	adds	r3, r3, r2
 8002802:	66bb      	str	r3, [r7, #104]	; 0x68
 8002804:	464b      	mov	r3, r9
 8002806:	460a      	mov	r2, r1
 8002808:	eb42 0303 	adc.w	r3, r2, r3
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	663b      	str	r3, [r7, #96]	; 0x60
 8002818:	667a      	str	r2, [r7, #100]	; 0x64
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002826:	4649      	mov	r1, r9
 8002828:	008b      	lsls	r3, r1, #2
 800282a:	4641      	mov	r1, r8
 800282c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002830:	4641      	mov	r1, r8
 8002832:	008a      	lsls	r2, r1, #2
 8002834:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002838:	f7fd fcfc 	bl	8000234 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <UART_SetConfig+0x504>)
 8002842:	fba3 1302 	umull	r1, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <UART_SetConfig+0x504>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4422      	add	r2, r4
 8002868:	609a      	str	r2, [r3, #8]
}
 800286a:	bf00      	nop
 800286c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	51eb851f 	.word	0x51eb851f

0800287c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800287c:	b084      	sub	sp, #16
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	f107 001c 	add.w	r0, r7, #28
 800288a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2b01      	cmp	r3, #1
 8002892:	d122      	bne.n	80028da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80028a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80028bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa9c 	bl	8002e0c <USB_CoreReset>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e01a      	b.n	8002910 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa90 	bl	8002e0c <USB_CoreReset>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
 8002902:	e005      	b.n	8002910 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10b      	bne.n	800292e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f043 0206 	orr.w	r2, r3, #6
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800293a:	b004      	add	sp, #16
 800293c:	4770      	bx	lr

0800293e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0201 	bic.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d115      	bne.n	80029ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800298e:	2001      	movs	r0, #1
 8002990:	f7fe f972 	bl	8000c78 <HAL_Delay>
      ms++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa28 	bl	8002df0 <USB_GetMode>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d01e      	beq.n	80029e4 <USB_SetCurrentMode+0x84>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b31      	cmp	r3, #49	; 0x31
 80029aa:	d9f0      	bls.n	800298e <USB_SetCurrentMode+0x2e>
 80029ac:	e01a      	b.n	80029e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d115      	bne.n	80029e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7fe f959 	bl	8000c78 <HAL_Delay>
      ms++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fa0f 	bl	8002df0 <USB_GetMode>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <USB_SetCurrentMode+0x84>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b31      	cmp	r3, #49	; 0x31
 80029dc:	d9f0      	bls.n	80029c0 <USB_SetCurrentMode+0x60>
 80029de:	e001      	b.n	80029e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e005      	b.n	80029f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b32      	cmp	r3, #50	; 0x32
 80029e8:	d101      	bne.n	80029ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029f8:	b084      	sub	sp, #16
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e009      	b.n	8002a2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	3340      	adds	r3, #64	; 0x40
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	2200      	movs	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0e      	cmp	r3, #14
 8002a30:	d9f2      	bls.n	8002a18 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11c      	bne.n	8002a72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e005      	b.n	8002a7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a84:	461a      	mov	r2, r3
 8002a86:	2300      	movs	r3, #0
 8002a88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a90:	4619      	mov	r1, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	461a      	mov	r2, r3
 8002a9a:	680b      	ldr	r3, [r1, #0]
 8002a9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10c      	bne.n	8002abe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f965 	bl	8002d7c <USB_SetDevSpeed>
 8002ab2:	e008      	b.n	8002ac6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f960 	bl	8002d7c <USB_SetDevSpeed>
 8002abc:	e003      	b.n	8002ac6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002abe:	2103      	movs	r1, #3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f95b 	bl	8002d7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8f3 	bl	8002cb4 <USB_FlushTxFifo>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f91f 	bl	8002d1c <USB_FlushRxFifo>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aee:	461a      	mov	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	461a      	mov	r2, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e043      	b.n	8002b9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b28:	d118      	bne.n	8002b5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e013      	b.n	8002b6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b52:	461a      	mov	r2, r3
 8002b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e008      	b.n	8002b6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	3301      	adds	r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3b7      	bcc.n	8002b12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e043      	b.n	8002c30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bbe:	d118      	bne.n	8002bf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e013      	b.n	8002c04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	461a      	mov	r2, r3
 8002bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e008      	b.n	8002c04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c10:	461a      	mov	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c22:	461a      	mov	r2, r3
 8002c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3b7      	bcc.n	8002ba8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f043 0210 	orr.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <USB_DevInit+0x2b8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f043 0208 	orr.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cac:	b004      	add	sp, #16
 8002cae:	4770      	bx	lr
 8002cb0:	803c3800 	.word	0x803c3800

08002cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <USB_FlushTxFifo+0x64>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e01b      	b.n	8002d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	daf2      	bge.n	8002cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <USB_FlushTxFifo+0x64>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e006      	b.n	8002d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d0f0      	beq.n	8002cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	00030d40 	.word	0x00030d40

08002d1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <USB_FlushRxFifo+0x5c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e018      	b.n	8002d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	daf2      	bge.n	8002d28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <USB_FlushRxFifo+0x5c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e006      	b.n	8002d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d0f0      	beq.n	8002d4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	00030d40 	.word	0x00030d40

08002d7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <USB_CoreReset+0x64>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e01b      	b.n	8002e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	daf2      	bge.n	8002e18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <USB_CoreReset+0x64>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d0f0      	beq.n	8002e42 <USB_CoreReset+0x36>

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	00030d40 	.word	0x00030d40

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4d0d      	ldr	r5, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1b64      	subs	r4, r4, r5
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2600      	movs	r6, #0
 8002e80:	42a6      	cmp	r6, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4d0b      	ldr	r5, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f000 f820 	bl	8002ecc <_init>
 8002e8c:	1b64      	subs	r4, r4, r5
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2600      	movs	r6, #0
 8002e92:	42a6      	cmp	r6, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9c:	4798      	blx	r3
 8002e9e:	3601      	adds	r6, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea6:	4798      	blx	r3
 8002ea8:	3601      	adds	r6, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08002f10 	.word	0x08002f10
 8002eb0:	08002f10 	.word	0x08002f10
 8002eb4:	08002f10 	.word	0x08002f10
 8002eb8:	08002f14 	.word	0x08002f14

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <_init>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr

08002ed8 <_fini>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr
