.syntax unified
.thumb
.text

@ Simbolos exportados --> No olvidar de colocar los nombres de las funciones aquí
.global asm_zeros

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ Prototipo en "C":
@   void asm_zeros(uint32_t *vectorIn, uint32_t longitud)
@
@ Parametros recibidos:
@   r0: VectorIn
@   r1: longitud
@	r2: auxiliar (no es un parámetro recibido)
@
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_zeros:
    	//Guarda de seguridad
    	cbz r0, exit
    	cbz r1, exit

    	mov r2, #0 //carga auxiliar con cero para transferir a vectorIn

    	loop:
    	subs r1, #1 //Decremento en uno el contador (longitud)
    	str r2, [r0, r1, LSL #2] //carga r2 = 0 en la posicion apuntada por
    							 //r0 (vectorIn) + desplazamiento r1(longitud o indice) o
    							 //(ubicación de cada elemento del vector) desplazado de
    							 //a 4 posiciones (LSL #2) porque cada elemento del vector
    							 // es de 4 bytes (32 bits)
        bne loop  @ "subs" en algun momento llegará a 0 en ese caso el flag Zero se activa
        		  @ y en ese caso  "bne" dará falso y sale del loop
        exit:
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
                    @ es la direccion, en el codigo del programa, de la
                    @ instruccion "bl asm_sum" usada para saltar a
                    @ esta funcion, entonces "lr" contiene ese "pc" + 4).
                    @ el valor de retorno debe quedar en el registro r0.
                    @ En este caso, r0 es el resultado de r0 + r1.

        @ Otras alternativas para el retorno
        @ mov pc,lr
        @ bx lr
        @ push {lr} ... pop {pc}
